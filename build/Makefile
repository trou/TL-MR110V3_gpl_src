# Copyright(c) 2019 Shenzhen TP-LINK Technologies Co.Ltd. 
# All Rights Reserved. 

MODEL=MR100V2
CPU_TYPE=mt7628
SUPPLIER=mtk_ApSoC_4320

include config/$(MODEL).config

build_all: env_build boot_build kernel_build modules_build apps_build fs_build image_build

######################
#define basic variable
TOP_PATH = $(shell pwd)/..
BUILD_PATH = $(TOP_PATH)/build
TOOLS_PATH = $(TOP_PATH)/host_tools
FAKEROOT_PATH = $(TOOLS_PATH)/fakeroot
FLASH_SIZE = 0x800000

$(eval $(call exportFlagsFromFile,config/$(MODEL).config))
$(eval $(call compileFlagsFromFile,BBA_FLAGS,config/$(MODEL).config))

SDK_FLAGS += $(BBA_FLAGS)

#Temporarily
ifeq ($(strip $(INCLUDE_LANGUAGE_EN)),y)
WEBFILE_PATH = $(TOP_PATH)/sysfiles/web/en
CONFFILE_PATH = $(TOP_PATH)/sysfiles/config/en
endif

ifeq ($(strip $(INCLUDE_LANGUAGE_CN)),y)
WEBFILE_PATH = $(TOP_PATH)/sysfiles/web/cn
CONFFILE_PATH = $(TOP_PATH)/sysfiles/config/cn
endif

TARGETS_PATH = $(TOP_PATH)/targets
export PUBLIC_APPS_PATH = $(TOP_PATH)/apps/public
export PRIVATE_APPS_PATH = $(TOP_PATH)/apps/private
OS_LIB_PATH = $(PUBLIC_APPS_PATH)/os_libs
TP_MODULES_PATH = $(TOP_PATH)/modules/private
GCC_PATH = /opt

ifeq ($(INCLUDE_PORTABLE_APP), y)
JSON_INOUT_PATH = $(WEBFILE_PATH)/common/js
endif

BUILD_DIR_PATH=$(TOP_PATH)/BUILD_DIR

PRIVATE_LIB_BIN_PATH = $(PRIVATE_APPS_PATH)/bins/$(OBJ_DIR)/libs/
PRIVATE_APPS_BIN_PATH = $(PRIVATE_APPS_PATH)/bins/$(OBJ_DIR)/apps/

MODEL_FS_PATH = $(TARGETS_PATH)/fs.$(MODEL)

export MEDIA_SERVER_PATH = $(PUBLIC_APPS_PATH)/media_server
export MEDIA_SERVER_INSTALL=$(MEDIA_SERVER_PATH)/media_server_install

UDISK_PATH = $(TOP_PATH)/targets/udisk.$(MODEL)
BACKTRACE_FS_PATH = $(TOP_PATH)/targets/backtracefs.$(MODEL)


IMAGE_PREFIX_OPT= -o $(PRODUCT_REGION_NAME)

UDISK_IMAGE_OPT =
MKIMAGETOOL = $(TOOLS_PATH)/imageTool/mkimage2
UDISK_PATH = $(TOP_PATH)/targets/udisk.$(MODEL)
ifeq ($(INCLUDE_UPDATE_UDISK_BY_ROUTER), y)
UDISK_IMAGE_OPT = -u $(UDISK_PATH)/udisk.zip
endif



######################
GCC_PATH = $(BUILD_DIR_PATH)/toolchain_$(CPU_TYPE)
TOOLCHAIN_PATH = $(GCC_PATH)/buildroot-gcc463

ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
OLD_TOOLCHAIN_PREFIX=/opt/buildroot-gcc463
else
OLD_TOOLCHAIN_PREFIX=/opt/buildroot-gcc463_share
endif

ifeq ($(WEB_COMPRESS), y)
export PATH :=$(TOOLCHAIN_PATH)/usr/bin:$(TOP_PATH)/build/compress_web/node-v6.11.4-linux-x64/bin:$(PATH)
else
export PATH :=$(TOOLCHAIN_PATH)/usr/bin:$(PATH)
endif
ARCH = mips
#SUPPLIER = mtk_ApSoC_4320
TOOLPREFIX = mipsel-linux-
HOST = mipsel-linux
KERNELVERSION = 2.6.36
OBJ_DIR = mtk_4.6.3
SLIB_PATH = $(GCC_PATH)/buildroot-gcc463/usr/mipsel-buildroot-linux-uclibc/sysroot/lib
SYSROOT_PATH = $(GCC_PATH)/buildroot-gcc463/usr/mipsel-buildroot-linux-uclibc/sysroot
KERNELPATH = $(TOP_PATH)/$(SUPPLIER)/linux-2.6.36.x
UBOOTPATH = $(TOP_PATH)/$(SUPPLIER)/Uboot
ROOTFSTOOLS = $(SUPPLIER_TOOLS)/mksquashfs4.2
SUPPLIER_PATH =  $(TOP_PATH)/$(SUPPLIER)
SUPPLIER_TOOLS = $(SUPPLIER_PATH)/tools

export CROSS_COMPILE
export ARCH
export GCC_PATH

unexport TC_CFLAGS
TC_CFLAGS += -DTCSUPPORT_IGMPSNOOPING_ENHANCE
export KERNELARCH = mips
export TC_CFLAGS

export KERNELVERSION
export INSTALL_WIRELESS = $(TOP_PATH)/$(SUPPLIER)/wireless
export MT7612E_AP_DIR = $(TOP_PATH)/$(SUPPLIER)/linux-2.6.36.x/drivers/net/wireless/MT7612_ap
export MT7628_DIR = $(TOP_PATH)/$(SUPPLIER)/linux-2.6.36.x/drivers/net/wireless/mt_wifi
export MT7613_AP_DIR = $(TOP_PATH)/$(SUPPLIER)/linux-2.6.36.x/drivers/net/wireless/MT7613_ap
export MT7610E_DIR = $(TOP_PATH)/$(SUPPLIER)/linux-2.6.36.x/drivers/net/wireless/MT7610_ap
export WIRELESSTOOLS =$(TOP_PATH)/$(SUPPLIER)/modules/public/wireless_tools.29
export WIRELESSTOOLSLIB = libiw.so.29

ifeq ($(INCLUDE_TINY_UBOOT),y)
UBOOT_TOOLCHAIN_PATH=$(GCC_PATH)/buildroot-gcc463/usr/bin
else
UBOOT_TOOLCHAIN_PATH=$(GCC_PATH)/buildroot-gcc342/bin
endif

######################
INSTALL_MOD_PATH = $(KERNELPATH)/../
export MODULES_PATH = $(TOP_PATH)/$(SUPPLIER)/modules/private
SUPPLIER_TOOLS = $(TOP_PATH)/$(SUPPLIER)/tools
BOOT_TG_PATH = $(TARGETS_PATH)/$(SUPPLIER)_boot
KERNEL_TG_PATH = $(TARGETS_PATH)/$(SUPPLIER)_$(CPU_TYPE)_kernel_$(MODEL)
MODULE_TG_PATH = $(TARGETS_PATH)/$(SUPPLIER)_$(CPU_TYPE)_modules_$(MODEL)

CC = $(TOOLPREFIX)gcc
LD = $(TOOLPREFIX)ld
AR = $(TOOLPREFIX)ar
STRIP = $(TOOLPREFIX)strip
RANLIB = $(TOOLPREFIX)ranlib


######################
DFLAGS = 
WEBFLAGS = 
DF_FLAGS = 

ifeq ($(INCLUDE_CPU_BIG_ENDIAN), y)
DFLAGS += -DINCLUDE_CPU_BIG_ENDIAN
CMM_TARGET_CPU_ENDIAN = 0
export CMM_TARGET_CPU_ENDIAN
endif

ifeq ($(INCLUDE_CPU_LITTLE_ENDIAN), y)
DFLAGS += -DINCLUDE_CPU_LITTLE_ENDIAN
CMM_TARGET_CPU_ENDIAN = 1
export CMM_TARGET_CPU_ENDIAN
endif

ifeq ($(INCLUDE_CPU_MT7621), y)
WEBFLAGS += INCLUDE_CPU_MT7621=1
DFLAGS += -DINCLUDE_CPU_MT7621
else
WEBFLAGS += INCLUDE_CPU_MT7621=0
endif

ifeq ($(INCLUDE_CPU_AR368), y) 
DFLAGS += -DINCLUDE_CPU_AR368
endif 

ifeq ($(INCLUDE_CPU_VR288), y) 
DFLAGS += -DINCLUDE_CPU_VR288
endif 

ifeq ($(INCLUDE_CPU_AR368FE), y) 
DFLAGS += -DINCLUDE_CPU_AR368FE
endif 

ifeq ($(strip $(INCLUDE_SOCKET_LOCK)), y)
DFLAGS += -DINCLUDE_SOCKET_LOCK
export INCLUDE_SOCKET_LOCK=y
endif

ifeq ($(INCLUDE_SERBIA), y) 
DFLAGS += -DINCLUDE_SERBIA
endif 

ifeq ($(INCLUDE_WATCHDOG), y) 
DFLAGS += -DINCLUDE_WATCHDOG
endif 

ifeq ($(INCLUDE_PPA_ACCELERATE), y)
DFLAGS += -DINCLUDE_PPA_ACCELERATE
endif

ifeq ($(INCLUDE_MTD_TYPE1), y)
DFLAGS += -DINCLUDE_MTD_TYPE1
MTD_PART_TYPE = 1
endif

ifeq ($(INCLUDE_MTD_TYPE2), y)
DFLAGS += -DINCLUDE_MTD_TYPE2
MTD_PART_TYPE = 2
endif

ifeq ($(INCLUDE_MTD_TYPE3), y)
DFLAGS += -DINCLUDE_MTD_TYPE3
MTD_PART_TYPE = 3
endif

ifeq ($(INCLUDE_MTD_TYPE4), y)
DFLAGS += -DINCLUDE_MTD_TYPE4
MTD_PART_TYPE = 4
endif

ifeq ($(INCLUDE_MTD_TYPE5), y)
DFLAGS += -DINCLUDE_MTD_TYPE5
MTD_PART_TYPE = 5
endif

ifeq ($(INCLUDE_MTD_TYPE6), y)
DFLAGS += -DINCLUDE_MTD_TYPE6
MTD_PART_TYPE = 6
endif

ifeq ($(INCLUDE_MTD_TYPE7), y)
DFLAGS += -DINCLUDE_MTD_TYPE7
MTD_PART_TYPE = 7
endif

ifeq ($(INCLUDE_MTD_TYPE8), y)
DFLAGS += -DINCLUDE_MTD_TYPE8
MTD_PART_TYPE = 8
endif

ifeq ($(INCLUDE_MTD_TYPE9), y)
DFLAGS += -DINCLUDE_MTD_TYPE9
MTD_PART_TYPE = 9
endif

ifeq ($(INCLUDE_MTD_TYPE10), y)
DFLAGS += -DINCLUDE_MTD_TYPE10
MTD_PART_TYPE = 10
endif

ifeq ($(INCLUDE_MTD_TYPE11), y)
DFLAGS += -DINCLUDE_MTD_TYPE11
MTD_PART_TYPE = 11
endif

ifeq ($(INCLUDE_MTD_TYPE_FS), y)
MTD_PART_TYPE = 0
endif

ifeq ($(INCLUDE_FLASH_4M), y)
DFLAGS += -DINCLUDE_FLASH_4M
FLASH_SIZE = 0x400000
endif

ifeq ($(INCLUDE_FLASH_8M), y)
DFLAGS += -DINCLUDE_FLASH_8M
FLASH_SIZE = 0x800000
endif

ifeq ($(INCLUDE_FLASH_10M), y)
DFLAGS += -DINCLUDE_FLASH_10M
FLASH_SIZE = 0xA00000
endif

ifeq ($(INCLUDE_FLASH_16M), y)
DFLAGS += -DINCLUDE_FLASH_16M
FLASH_SIZE = 0x1000000
endif

ifeq ($(INCLUDE_FLASH_128M), y)
DFLAGS += -DINCLUDE_FLASH_128M
FLASH_SIZE = 0x8000000
endif

ifeq ($(INCLUDE_TINY_UBOOT),y)
DFLAGS += -DINCLUDE_TINY_UBOOT
endif

ifeq ($(INCLUDE_MEM_FREE_OPTIMIZE),y)
DFLAGS += -DINCLUDE_MEM_FREE_OPTIMIZE
endif

ifeq ($(INCLUDE_CLI_FULL_FEATURE), y)
DFLAGS += -DINCLUDE_CLI_FULL_FEATURE
endif

ifeq ($(INCLUDE_TPLINK_CONSOLE_CONTROL_CLI), y)
DFLAGS += -DINCLUDE_TPLINK_CONSOLE_CONTROL_CLI
endif

ifeq ($(INCLUDE_TPLINK_CONSOLE_CONTROL), y)
DFLAGS += -DINCLUDE_TPLINK_CONSOLE_CONTROL
endif

ifdef TPLINK_CONSOLE_CONTROL_DEFAULT
DFLAGS += -DTPLINK_CONSOLE_CONTROL_DEFAULT=$(TPLINK_CONSOLE_CONTROL_DEFAULT)
endif

ifeq ($(INCLUDE_NOIP_DNS_LAUNCH_WHEN_ENABLE), y)
DFLAGS += -DINCLUDE_NOIP_DNS_LAUNCH_WHEN_ENABLE
endif

ifeq ($(INCLUDE_DYN_DNS_LAUNCH_WHEN_ENABLE), y)
DFLAGS += -DINCLUDE_DYN_DNS_LAUNCH_WHEN_ENABLE
endif

ifeq ($(INCLUDE_SNMPD_LAUNCH_WHEN_ENABLE), y)
DFLAGS += -DINCLUDE_SNMPD_LAUNCH_WHEN_ENABLE
endif

ifeq ($(INCLUDE_IPSEC_LAUNCH_WHEN_ENABLE), y)
DFLAGS += -DINCLUDE_IPSEC_LAUNCH_WHEN_ENABLE
endif

ifeq ($(INCLUDE_CWMP_LAUNCH_WHEN_ENABLE), y)
DFLAGS += -DINCLUDE_CWMP_LAUNCH_WHEN_ENABLE
endif

ifeq ($(INCLUDE_NO_DNSPROXY), y)
DFLAGS += -DINCLUDE_NO_DNSPROXY
endif

ifeq ($(INCLUDE_DNSPROXY_IN_COS), y)
DFLAGS += -DINCLUDE_DNSPROXY_IN_COS
endif

ifeq ($(INCLUDE_USER_ACCOUNT), y) 
DFLAGS += -DINCLUDE_USER_ACCOUNT
endif

ifeq ($(INCLUDE_CHGINIT_PWD), y) 
DFLAGS += -DINCLUDE_CHGINIT_PWD
endif

ifeq ($(INCLUDE_CHGINIT_PWD_CN), y) 
DFLAGS += -DINCLUDE_CHGINIT_PWD_CN
endif

ifeq ($(INCLUDE_AUTH_PASSWORD), y) 
DFLAGS += -DINCLUDE_AUTH_PASSWORD
endif

ifeq ($(INCLUDE_SWITCH_MT7628), y) 
DFLAGS += -DINCLUDE_SWITCH_MT7628
endif

ifeq ($(INCLUDE_SWITCH_MT7621), y)
DFLAGS += -DINCLUDE_SWITCH_MT7621
endif

ifeq ($(INCLUDE_X_TP_VLAN), y) 
DFLAGS += -DINCLUDE_X_TP_VLAN
endif

ifeq ($(INCLUDE_EWAN_VLAN), y)
DFLAGS += -DINCLUDE_EWAN_VLAN
endif

ifeq ($(INCLUDE_EWAN_AT_PORT3), y)
DFLAGS += -DINCLUDE_EWAN_AT_PORT3
endif

ifeq ($(INCLUDE_LOGIN_GDPR_ENCRYPT),y)
WEBFLAGS +=INCLUDE_LOGIN_GDPR_ENCRYPT=1
DFLAGS += -DINCLUDE_LOGIN_GDPR_ENCRYPT
else
WEBFLAGS +=INCLUDE_LOGIN_GDPR_ENCRYPT=0
endif

ifeq ($(INCLUDE_OPTIMIZE_NET_QUEUE), y)
DFLAGS += -DINCLUDE_OPTIMIZE_NET_QUEUE
endif

#################### ETH Type ######################
ifeq ($(INCLUDE_ETH_LTQ), y) 
DFLAGS += -DINCLUDE_ETH_LTQ
endif 

ifeq ($(INCLUDE_ETH_RA), y) 
DFLAGS += -DINCLUDE_ETH_RA
endif 

ifeq ($(INCLUDE_ETH_ATH), y) 
DFLAGS += -DINCLUDE_ETH_ATH
endif 

ifeq ($(INCLUDE_GMAC1_ONLY), y)
DFLAGS += -DINCLUDE_GMAC1_ONLY
endif
#add by wx
ifeq ($(INCLUDE_RMNET_QMI), y)
DFLAGS += -DINCLUDE_RMNET_QMI
endif
#add by wx
ifeq ($(INCLUDE_FIBOCOM_ANTENNA_TEST), y)
DFLAGS += -DINCLUDE_FIBOCOM_ANTENNA_TEST
endif

ifeq ($(INCLUDE_FUNC_AUTOPORT), y)
DFLAGS += -DINCLUDE_FUNC_AUTOPORT
endif

ifeq ($(INCLUDE_ASR_AT), y)
DFLAGS += -DINCLUDE_ASR_AT
WEBFLAGS += INCLUDE_ASR_AT=1
else
WEBFLAGS += INCLUDE_ASR_AT=0
endif

ifeq ($(INCLUDE_QTL_AT), y)
DFLAGS += -DINCLUDE_QTL_AT
WEBFLAGS += INCLUDE_QTL_AT=1
else
WEBFLAGS += INCLUDE_QTL_AT=0
endif

ifeq ($(INCLUDE_FIBOCOM_AT), y)
DFLAGS += -DINCLUDE_FIBOCOM_AT
WEBFLAGS += INCLUDE_FIBOCOM_AT=1
else
WEBFLAGS += INCLUDE_FIBOCOM_AT=0
endif

ifeq ($(INCLUDE_USB_NET_CDC_NCM), y)
DFLAGS += -DINCLUDE_USB_NET_CDC_NCM
endif

ifeq ($(INCLUDE_SMS_WITHOUT_SQLITE), y)
DFLAGS += -DINCLUDE_SMS_WITHOUT_SQLITE
endif

ifeq ($(INCLUDE_CHANGE_APP_OOM_SCORE), y)
DFLAGS += -DINCLUDE_CHANGE_APP_OOM_SCORE
endif

###################### WIFI  ########################
ifeq ($(INCLUDE_LAN_WLAN), y) 
DFLAGS += -DINCLUDE_LAN_WLAN 
endif 

ifeq ($(INCLUDE_WLAN_OPTIMIZE_OAL_RA), y)
DFLAGS += -DINCLUDE_WLAN_OPTIMIZE_OAL_RA
endif

ifeq ($(INCLUDE_WLAN_RA), y) 
DFLAGS += -DINCLUDE_WLAN_RA
ifeq ($(INCLUDE_WIFI_5G_CHIP_MT7610E), y)
DFLAGS += -DINCLUDE_WIFI_5G_CHIP_MT7610E
endif
ifeq ($(INCLUDE_WIFI_5G_CHIP_MT7612E), y)
DFLAGS += -DINCLUDE_WIFI_5G_CHIP_MT7612E
endif
ifeq ($(INCLUDE_WIFI_5G_CHIP_MT7613), y)
DFLAGS += -DINCLUDE_WIFI_5G_CHIP_MT7613
endif
endif

ifeq ($(INCLUDE_WLAN_RTL), y) 
DFLAGS += -DINCLUDE_WLAN_RTL
endif 

ifeq ($(INCLUDE_WLAN_ATH), y) 
DFLAGS += -DINCLUDE_WLAN_ATH
endif 

ifeq ($(ATH_A_BAND_MIMO_NUM_3_3), y)
DFLAGS += -DWLAN_ATH_A_BAND_MIMO_NUM=3
endif

ifeq ($(ATH_G_BAND_MIMO_NUM_2_2), y)
DFLAGS += -DWLAN_ATH_G_BAND_MIMO_NUM=2
endif

ifeq ($(ATH_G_BAND_MIMO_NUM_3_3), y)
DFLAGS += -DWLAN_ATH_G_BAND_MIMO_NUM=3
endif

ifeq ($(INCLUDE_LAN_WLAN_MSSID), y) 
DFLAGS += -DINCLUDE_LAN_WLAN_MSSID 
endif 

ifdef WLAN_VAP_NUM
DFLAGS += -DWLAN_VAP_NUM=$(WLAN_VAP_NUM)
endif

ifeq ($(INCLUDE_LAN_WLAN_GUESTNETWORK), y) 
DFLAGS += -DINCLUDE_LAN_WLAN_GUESTNETWORK 
endif 

ifeq ($(INCLUDE_LAN_WLAN_THREE_PPA), y) 
DFLAGS += -DINCLUDE_LAN_WLAN_THREE_PPA
endif 

ifeq ($(INCLUDE_LAN_WLAN_WDS), y) 
DFLAGS += -DINCLUDE_LAN_WLAN_WDS
endif 

ifeq ($(INCLUDE_LAN_WLAN_WDS_DETECT), y)
DFLAGS += -DINCLUDE_LAN_WLAN_WDS_DETECT
endif

ifeq ($(INCLUDE_LAN_WLAN_8021X), y) 
DFLAGS += -DINCLUDE_LAN_WLAN_802_1X
endif 

ifeq ($(INCLUDE_LAN_WLAN_DUALBAND),y)
DFLAGS += -DINCLUDE_LAN_WLAN_DUALBAND
endif

ifeq ($(INCLUDE_SUPPORT_WPA3),y)
DFLAGS += -DINCLUDE_SUPPORT_WPA3
WEBFLAGS += INCLUDE_SUPPORT_WPA3=1
else
WEBFLAGS += INCLUDE_SUPPORT_WPA3=0
endif

ifeq ($(INCLUDE_LAN_WLAN_AC),y)
DFLAGS+= -DINCLUDE_LAN_WLAN_AC
endif

ifeq ($(INCLUDE_LAN_WLAN_SCHEDULE), y)
DFLAGS += -DINCLUDE_LAN_WLAN_SCHEDULE
endif

#added by xw 2013_9_9
ifeq ($(INCLUDE_WLAN_LQ), y)
DFLAGS += -DINCLUDE_WLAN_LQ

ifeq ($(INCLUDE_WLAN_LQ_WRX313), y)
DFLAGS += -DINCLUDE_WLAN_LQ_WRX313
endif

ifeq ($(INCLUDE_WLAN_LQ_WAVE300), y)
DFLAGS += -DINCLUDE_WLAN_LQ_WAVE300
endif


endif


ifeq ($(INCLUDE_LAN_WLAN_DIFFERENT_CHIP),y)
DFLAGS += -DINCLUDE_LAN_WLAN_DIFFERENT_CHIP
endif

ifeq ($(strip $(INCLUDE_EDCCA_OFF)), y)
DFLAGS += -DINCLUDE_EDCCA_OFF
endif

ifeq ($(INCLUDE_NETWORK_ROAMING), y)
DFLAGS += -DINCLUDE_NETWORK_ROAMING
endif

ifeq ($(INCLUDE_ADAPTIVE_PATH_SELECTION), y)
DFLAGS += -DINCLUDE_ADAPTIVE_PATH_SELECTION
endif

ifeq ($(INCLUDE_ONEMESH), y)
DFLAGS += -DINCLUDE_ONEMESH
WEBFLAGS += INCLUDE_ONEMESH=1
DFLAGS += -DINCLUDE_THREADPOOL
else
WEBFLAGS += INCLUDE_ONEMESH=0
endif

ifeq ($(INCLUDE_THERMAL_PROTECT_SUPPORT), y)
DFLAGS += -DINCLUDE_THERMAL_PROTECT_SUPPORT
endif

ifeq ($(INCLUDE_THERMAL_PROTECT_SUPPORT_24G), y)
DFLAGS += -DINCLUDE_THERMAL_PROTECT_SUPPORT
DFLAGS += -DINCLUDE_THERMAL_PROTECT_SUPPORT_24G
endif

ifeq ($(INCLUDE_THERMAL_PROTECT_SUPPORT_5G), y)
DFLAGS += -DINCLUDE_THERMAL_PROTECT_SUPPORT
DFLAGS += -DINCLUDE_THERMAL_PROTECT_SUPPORT_5G
endif


ifeq ($(INCLUDE_HT2040_COEX), y)
DFLAGS += -DINCLUDE_HT2040_COEX
endif

ifeq ($(INCLUDE_4ADDR_AP), y)
DFLAGS += -DINCLUDE_4ADDR_AP
WEBFLAGS += INCLUDE_4ADDR_AP=1
else
WEBFLAGS += INCLUDE_4ADDR_AP=0
endif

ifeq ($(INCLUDE_ONEMESH_BACKHAUL_4ADDR), y)
DFLAGS += -DINCLUDE_4ADDR_AP
DFLAGS += -DINCLUDE_ONEMESH_BACKHAUL_4ADDR
endif

ifeq ($(INCLUDE_WEB_IN_UDISK), y)
DFLAGS += -DINCLUDE_WEB_IN_UDISK
endif

ifeq ($(INCLUDE_WL_PROGRESSBAR), y)
WEBFLAGS += INCLUDE_WL_PROGRESSBAR=1
else
WEBFLAGS += INCLUDE_WL_PROGRESSBAR=0
endif

ifeq ($(INCLUDE_LAN_WLAN_MU_BUTTION), y)
DFLAGS += -DINCLUDE_LAN_WLAN_MU_BUTTION
WEBFLAGS += INCLUDE_LAN_WLAN_MU_BUTTION=1
else
WEBFLAGS += INCLUDE_LAN_WLAN_MU_BUTTION=0
endif

###################### PON  ########################

ifeq ($(strip $(INCLUDE_CPU_88F6550)),y)
DFLAGS += -DINCLUDE_PON_VG1530_ENV
DFLAGS += -DINCLUDE_PON_MARVELL_SW_LIB
endif

ifeq ($(INCLUDE_PON), y) 
DFLAGS += -DINCLUDE_PON
endif 

ifeq ($(INCLUDE_PON_EPON), y) 
DFLAGS += -DINCLUDE_PON_EPON
endif 

ifeq ($(INCLUDE_PON_GPON), y)
DFLAGS += -DINCLUDE_PON_GPON
endif

#################### Function ######################

ifeq ($(INCLUDE_BRIDGING), y)
DFLAGS += -DINCLUDE_BRIDGING
endif

ifeq ($(INCLUDE_ADSLWAN), y)
DFLAGS += -DINCLUDE_ADSLWAN
endif

ifeq ($(INCLUDE_VDSLWAN), y)
DFLAGS += -DINCLUDE_VDSLWAN
endif

ifeq ($(INCLUDE_ADSL_RA), y)
DFLAGS += -DINCLUDE_ADSL_RA
endif

ifeq ($(INCLUDE_ADSL_RTL), y)
DFLAGS += -DINCLUDE_ADSL_RTL
endif

ifeq ($(INCLUDE_ADSL_LTQ), y)
DFLAGS += -DINCLUDE_ADSL_LTQ
endif

ifeq ($(INCLUDE_ETHERNET_WAN), y)
DFLAGS += -DINCLUDE_ETHERNET_WAN
DFLAGS += -DEWAN_VERSION=$(EWAN_VERSION)
endif

ifeq ($(INCLUDE_IGMP), y)
DFLAGS += -DINCLUDE_IGMP
endif

ifeq ($(INCLUDE_IPTV), y)
DFLAGS += -DINCLUDE_IPTV

ifeq ($(INCLUDE_IPTV_V2), y)
DFLAGS += -DINCLUDE_IPTV_V2
endif

ifeq ($(INCLUDE_EWAN_IPTV), y)
DFLAGS += -DINCLUDE_EWAN_IPTV
endif

endif

ifeq ($(INCLUDE_AUTO_PVC), y)
DFLAGS += -DINCLUDE_AUTO_PVC
endif

ifeq ($(INCLUDE_RIP), y)
DFLAGS += -DINCLUDE_RIP
endif

ifeq ($(INCLUDE_SNMP), y)
DFLAGS += -DINCLUDE_SNMP
endif

ifeq ($(INCLUDE_SSL), y)
DFLAGS += -DINCLUDE_SSL
endif

ifeq ($(INCLUDE_CWMP), y)
DFLAGS += -DINCLUDE_CWMP
endif

ifeq ($(INCLUDE_CWMP_SSL), y)
DFLAGS += -DINCLUDE_CWMP_SSL
export INCLUDE_CWMP_SSL
ifeq ($(INCLUDE_CWMP_SSL_VERIFY_PEER), y)
DFLAGS += -DINCLUDE_CWMP_SSL_VERIFY_PEER
export INCLUDE_CWMP_SSL_VERIFY_PEER
endif
endif

ifeq ($(INCLUDE_DIGITAL_SIGNATURE), y)
DFLAGS += -DINCLUDE_DIGITAL_SIGNATURE
endif

ifeq ($(INCLUDE_DNS_PROXY), y)
DFLAGS += -DINCLUDE_DNS_PROXY
endif

ifeq ($(INCLUDE_DDNS), y)
DFLAGS += -DINCLUDE_DDNS
endif

ifeq ($(INCLUDE_DDNS_PH), y)
DFLAGS += -DINCLUDE_DDNS_PH
endif

ifeq ($(INCLUDE_DYNDNS), y)
DFLAGS += -DINCLUDE_DYNDNS
endif

ifeq ($(INCLUDE_NOIPDNS), y)
DFLAGS += -DINCLUDE_NOIPDNS
endif

ifeq ($(INCLUDE_DDNS_USERDEFINE), y)
DFLAGS += -DINCLUDE_DDNS_USERDEFINE

ifeq ($(INCLUDE_DDNS_USERDEFINE_DETAIL), y)
DFLAGS += -DINCLUDE_DDNS_USERDEFINE_DETAIL
endif

endif

ifeq ($(INCLUDE_ALG), y)
DFLAGS += -DINCLUDE_ALG
endif

ifeq ($(INCLUDE_ALG_H323), y)
DFLAGS += -DINCLUDE_ALG_H323
endif

ifeq ($(INCLUDE_ALG_SIP), y)
DFLAGS += -DINCLUDE_ALG_SIP
endif

ifeq ($(INCLUDE_ALG_RTSP), y)
DFLAGS += -DINCLUDE_ALG_RTSP
WEBFLAGS += INCLUDE_ALG_RTSP=1
else
WEBFLAGS += INCLUDE_ALG_RTSP=0
endif

ifeq ($(INCLUDE_NO_STAT_DDOS), y)
WEBFLAGS += INCLUDE_STAT_DDOS=0
else
DFLAGS += -DINCLUDE_STAT_DDOS
WEBFLAGS += INCLUDE_STAT_DDOS=1
endif

ifeq ($(INCLUDE_WAN_DETECT), y)
DFLAGS += -DINCLUDE_WAN_DETECT
endif

ifeq ($(INCLUDE_APP_IQOS), y)
DFLAGS += -DINCLUDE_APP_IQOS
endif

ifeq ($(INCLUDE_HIDE_WEB_TC), y)
WEBFLAGS += INCLUDE_HIDE_WEB_TC=1
else
WEBFLAGS += INCLUDE_HIDE_WEB_TC=0
endif

#NOTE:INCLUDE_VOIP in voip.mak
ifeq ($(INCLUDE_VOIP), y)
DFLAGS += $(VOIP_DFLAGS)
DF_FLAGS += $(VOIP_CFLAGS)
endif

ifeq ($(INCLUDE_IPV6), y)
DFLAGS += -DINCLUDE_IPV6

ifeq ($(INCLUDE_XLAT), y)
DFLAGS += -DINCLUDE_XLAT
WEBFLAGS += INCLUDE_XLAT=1
else
WEBFLAGS += INCLUDE_XLAT=0
endif

ifeq ($(INCLUDE_XLAT_NO_ROAMING), y)
DFLAGS += -DINCLUDE_XLAT_NO_ROAMING
endif

ifeq ($(INCLUDE_IPV6_AUTO), y)
DFLAGS += -DINCLUDE_IPV6_AUTO
WEBFLAGS += INCLUDE_IPV6_AUTO=1
else
WEBFLAGS += INCLUDE_IPV6_AUTO=0
endif

ifeq ($(INCLUDE_IPV6_MLD), y)
DFLAGS += -DINCLUDE_IPV6_MLD
endif

ifeq ($(INCLUDE_IPV6_SLAAC), y)
DFLAGS += -DINCLUDE_IPV6_SLAAC
endif

ifeq ($(INCLUDE_IPV6_HTTP), y)
DFLAGS += -DINCLUDE_IPV6_HTTP
endif

ifeq ($(INCLUDE_IPV6FIREWALL), y)
DFLAGS += -DINCLUDE_IPV6FIREWALL
endif

endif

ifeq ($(INCLUDE_USB), y)
DFLAGS += -DINCLUDE_USB
endif

ifeq ($(INCLUDE_USB_OVER_IP), y)
DFLAGS += -DINCLUDE_USB_OVER_IP
endif

ifeq ($(INCLUDE_USB_OVER_IP_TPLINK), y)
DFLAGS += -DINCLUDE_USB_OVER_IP_TPLINK
endif

ifeq ($(INCLUDE_USB_OVER_IP_KCODES), y)
DFLAGS += -DINCLUDE_USB_OVER_IP_KCODES
endif

ifeq ($(INCLUDE_USB_STORAGE), y)
DFLAGS += -DINCLUDE_USB_STORAGE
endif

ifeq ($(INCLUDE_USB_DIAGNOSTICS), y)
DFLAGS += -DINCLUDE_USB_DIAGNOSTICS
endif

ifeq ($(INCLUDE_USB_MEDIA_SERVER), y)
DFLAGS += -DINCLUDE_USB_MEDIA_SERVER
endif

ifeq ($(INCLUDE_USHARE), y)
DFLAGS += -DINCLUDE_USHARE
endif

ifeq ($(INCLUDE_MINIDLNA), y)
DFLAGS += -DINCLUDE_MINIDLNA
endif

ifeq ($(INCLUDE_LITE_MINIDLNA), y)
DFLAGS += -DINCLUDE_LITE_MINIDLNA
endif

ifeq ($(INCLUDE_USB_SAMBA_SERVER), y)
DFLAGS += -DINCLUDE_USB_SAMBA_SERVER
endif

ifeq ($(INCLUDE_USB_FTP_SERVER), y)
DFLAGS += -DINCLUDE_USB_FTP_SERVER
endif

ifeq ($(INCLUDE_USB_3G_DONGLE), y)
DFLAGS += -DINCLUDE_USB_3G_DONGLE
endif

ifeq ($(INCLUDE_WAN_MODE), y)
DFLAGS += -DINCLUDE_WAN_MODE
endif

ifeq ($(INCLUDE_QOS), y)
DFLAGS += -DINCLUDE_QOS
endif

ifeq ($(INCLUDE_ANNEXB), y)
DFLAGS += -DINCLUDE_ANNEXB
endif

ifeq ($(INCLUDE_WAN_VLAN), y)
DFLAGS += -DINCLUDE_WAN_VLAN
endif

ifeq ($(INCLUDE_POLICY_ROUTE), y)
DFLAGS += -DINCLUDE_POLICY_ROUTE
endif

ifeq ($(INCLUDE_L2TP), y)
DFLAGS += -DINCLUDE_L2TP
endif

ifeq ($(INCLUDE_PPTP), y)
DFLAGS += -DINCLUDE_PPTP
endif

ifeq ($(INCLUDE_DUAL_ACCESS), y)
DFLAGS += -DINCLUDE_DUAL_ACCESS
endif

ifeq ($(INCLUDE_ACL), y)
DFLAGS += -DINCLUDE_ACL
ifeq ($(INCLUDE_ACL_ADVANCE), y)
DFLAGS += -DINCLUDE_ACL_ADVANCE
endif
endif

ifeq ($(INCLUDE_PORTABLE_APP), y)
DFLAGS += -DINCLUDE_PORTABLE_APP
WEBFLAGS += INCLUDE_PORTABLE_APP=1
else
WEBFLAGS += INCLUDE_PORTABLE_APP=0
endif

ifeq ($(INCLUDE_TR143), y)
DFLAGS += -DINCLUDE_TR143
endif

#add by frl,2015-09-14
ifeq ($(INCLUDE_CLOUD), y)
DFLAGS += -DINCLUDE_CLOUD
endif

ifeq ($(INCLUDE_CLOUD_UPGRADE), y)
DFLAGS += -DINCLUDE_CLOUD_UPGRADE
endif

ifeq ($(INCLUDE_CLOUD_ACCOUNT), y)
DFLAGS += -DINCLUDE_CLOUD_ACCOUNT
endif

ifeq ($(INCLUDE_WAN_BLOCK), y)
DFLAGS += -DINCLUDE_WAN_BLOCK
endif

ifeq ($(INCLUDE_WAN_BLOCK_WAN_ERROR), y)
DFLAGS += -DINCLUDE_WAN_BLOCK_WAN_ERROR
endif

ifeq ($(INCLUDE_WAN_BLOCK_FW_UP_INFO), y)
DFLAGS += -DINCLUDE_WAN_BLOCK_FW_UP_INFO
endif
#add end

#add by wx 11-9
ifeq ($(INCLUDE_FACTORY_BLOCK), y)
DFLAGS += -DINCLUDE_FACTORY_BLOCK
endif
#add end
#add by wx 12-20
ifeq ($(INCLUDE_COMBINED_IMAGE), y)
DFLAGS += -DINCLUDE_COMBINED_IMAGE
endif
#add end

ifeq ($(INCLUDE_HOSTNAME_EDITABLE), y)
DFLAGS += -DINCLUDE_HOSTNAME_EDITABLE
endif


ifeq ($(INCLUDE_REBOOT_SCHEDULE), y)
DFLAGS += -DINCLUDE_REBOOT_SCHEDULE
endif

ifeq ($(INCLUDE_LED_SCHEDULE), y)
DFLAGS += -DINCLUDE_LED_SCHEDULE
endif

ifeq ($(INCLUDE_LED_BUTTON), y)
DFLAGS += -DINCLUDE_LED_BUTTON
endif

ifeq ($(INCLUDE_LTEWAN), y)
DFLAGS += -DINCLUDE_LTEWAN
ifeq ($(INCLUDE_3G4G_BACKUP), y)
DFLAGS += -DINCLUDE_3G4G_BACKUP
ifeq ($(INCLUDE_CHECK_WANALIVE_WITH_PING), y)
DFLAGS += -DINCLUDE_CHECK_WANALIVE_WITH_PING
WEBFLAGS += INCLUDE_CHECK_WANALIVE_WITH_PING=1
else
WEBFLAGS += INCLUDE_CHECK_WANALIVE_WITH_PING=0
endif
endif
ifeq ($(INCLUDE_UDISK_AUTO), y)
DFLAGS += -DINCLUDE_UDISK_AUTO

ifeq ($(INCLUDE_UPDATE_UDISK_BY_ROUTER), y)
DFLAGS += -DINCLUDE_UPDATE_UDISK_BY_ROUTER
endif

else
ifeq ($(INCLUDE_UDISK_MANUAL), y)
DFLAGS += -DINCLUDE_UDISK_MANUAL
else
DFLAGS += -DINCLUDE_UDISK_MANUAL
endif

ifeq ($(INCLUDE_SMS_WITHOUT_SQLITE), y)
DFLAGS += -DINCLUDE_SMS_WITHOUT_SQLITE
endif

ifeq ($(INCLUDE_UPGRADE_ROUTER_BIN_IN_UDISK), y)
DFLAGS += -DINCLUDE_UPGRADE_ROUTER_BIN_IN_UDISK
endif

ifeq ($(INCLUDE_UPDATE_UDISK_BY_ROUTER), y)
DFLAGS += -DINCLUDE_UPDATE_UDISK_BY_ROUTER
endif
endif

ifeq ($(INCLUDE_APPS_IN_UDISK), y)
DFLAGS += -DINCLUDE_APPS_IN_UDISK
endif

ifeq ($(INCLUDE_LTE_ANTENNA_TYPE), y)
DFLAGS += -DINCLUDE_LTE_ANTENNA_TYPE
WEBFLAGS += INCLUDE_LTE_ANTENNA_TYPE=1
else
WEBFLAGS += INCLUDE_LTE_ANTENNA_TYPE=0
endif

ifeq ($(INCLUDE_USSD), y)
DFLAGS += -DINCLUDE_USSD
WEBFLAGS += INCLUDE_USSD=1
else
WEBFLAGS += INCLUDE_USSD=0
endif
ifeq ($(INCLUDE_DATALIMIT_SMS_ALERT), y)
DFLAGS += -DINCLUDE_DATALIMIT_SMS_ALERT
endif
ifeq ($(INCLUDE_LTE_NET_STATISTICS), y)
DFLAGS += -DINCLUDE_LTE_NET_STATISTICS
endif
ifeq ($(INCLUDE_LTE_ISP_PROF_NUM_32), y)
DFLAGS += -DINCLUDE_LTE_ISP_PROF_NUM_32
endif
ifeq ($(INCLUDE_LTE_SEARCH_BAND), y)
DFLAGS += -DINCLUDE_LTE_SEARCH_BAND
export INCLUDE_LTE_BAND_INFO
export INCLUDE_LTE_CAT_TYPE
WEBFLAGS += INCLUDE_LTE_SEARCH_BAND=1
else
WEBFLAGS += INCLUDE_LTE_SEARCH_BAND=0
endif
endif

ifeq ($(INCLUDE_MOBILEDOG), y)
DFLAGS += -DINCLUDE_MOBILEDOG
endif

ifeq ($(INCLUDE_LTE_MULTI_CA), y)
DFLAGS += -DINCLUDE_LTE_MULTI_CA
endif

ifeq ($(INCLUDE_FOTA), y)
DFLAGS += -DINCLUDE_FOTA
endif

ifeq ($(INCLUDE_VPN), y)
DFLAGS += -DINCLUDE_VPN
endif

ifeq ($(INCLUDE_IPSEC), y)
DFLAGS += -DINCLUDE_IPSEC
endif

ifeq ($(INCLUDE_IPSEC_IPSECTOOLS), y)
DFLAGS += -DINCLUDE_IPSEC_IPSECTOOLS
endif

ifeq ($(INCLUDE_IPSEC_STRONGSWAN), y)
DFLAGS += -DINCLUDE_IPSEC_STRONGSWAN
endif

ifeq ($(INCLUDE_SFE), y)
DFLAGS += -DINCLUDE_SFE
endif

ifeq ($(INCLUDE_OPENVPN_SERVER), y)
DFLAGS += -DINCLUDE_OPENVPN_SERVER
endif

ifeq ($(INCLUDE_PPTPVPN_SERVER), y)
DFLAGS += -DINCLUDE_PPTPVPN_SERVER
endif

ifeq ($(INCLUDE_GERMANY_SPEC), y)
DFLAGS += -DINCLUDE_GERMANY_SPEC
endif

ifeq ($(INCLUDE_ID_SPEC), y)
DFLAGS += -DINCLUDE_ID_SPEC
endif

ifeq ($(INCLUDE_PPP_RECONN), y)
DFLAGS += -DINCLUDE_PPP_RECONN
endif

ifeq ($(INCLUDE_IGMP_ETHPROXY), y)
DFLAGS += -DINCLUDE_IGMP_ETHPROXY
endif

ifeq ($(INCLUDE_MER), y)
DFLAGS += -DINCLUDE_MER
endif

ifeq ($(INCLUDE_ADSLVID_DETECT), y)
DFLAGS += -DINCLUDE_ADSLVID_DETECT
endif

ifeq ($(INCLUDE_HTTP_SSL), y)
DFLAGS += -DINCLUDE_HTTP_SSL
WEBFLAGS += INCLUDE_HTTP_SSL=1
else
WEBFLAGS += INCLUDE_HTTP_SSL=0
endif

ifeq ($(INCLUDE_DOMAIN_INTERCEPT), y)
DFLAGS += -DINCLUDE_DOMAIN_INTERCEPT
endif

DF_FLAGS += $(DFLAGS)


ifeq ($(PENNYTEL), y) 
DF_FLAGS += -DPENNYTEL
endif 

ifeq ($(INCLUDE_YANDEX_DNS), y)
DFLAGS += -DINCLUDE_YANDEX_DNS
endif

ifeq ($(INCLUDE_RESTRICT_CHILD_ACCESS), y)
DFLAGS += -DINCLUDE_RESTRICT_CHILD_ACCESS
endif

WEBFLAGS += WEB_INCLUDE_TEST=0

ifeq ($(WEB_INCLUDE_MULTI_EWAN), y)
WEBFLAGS += WEB_INCLUDE_MULTI_EWAN=1
else
WEBFLAGS += WEB_INCLUDE_MULTI_EWAN=0
endif

ifeq ($(WEB_INCLUDE_DST), y)
WEBFLAGS += WEB_INCLUDE_DST=1
else
WEBFLAGS += WEB_INCLUDE_DST=0
endif

ifeq ($(INCLUDE_WEB_REGION), y)
DFLAGS += -DINCLUDE_WEB_REGION
endif

ifeq ($(WEB_INCLUDE_HELP), y)
WEBFLAGS += WEB_INCLUDE_HELP=1
else
WEBFLAGS += WEB_INCLUDE_HELP=0
endif

ifeq ($(WEB_INCLUDE_MOBILE_UI), y)
WEBFLAGS += WEB_INCLUDE_MOBILE_UI=1
DFLAGS += -DWEB_INCLUDE_MOBILE_UI
else
WEBFLAGS += WEB_INCLUDE_MOBILE_UI=0
endif

ifeq ($(INCLUDE_MULTI_LANGUAGE), y)
WEBFLAGS += INCLUDE_MULTI_LANGUAGE=1
DFLAGS += -DINCLUDE_MULTI_LANGUAGE
ifeq ($(INCLUDE_MULTI_LANGUAGE_V2), y)
DFLAGS += -DINCLUDE_MULTI_LANGUAGE_V2
endif
else
WEBFLAGS += INCLUDE_MULTI_LANGUAGE=0
endif

ifeq ($(INCLUDE_LANGUAGE_EN_US), y)
WEBFLAGS += INCLUDE_LANGUAGE_EN_US=1
else
WEBFLAGS += INCLUDE_LANGUAGE_EN_US=0
endif

ifeq ($(INCLUDE_LANGUAGE_DE_DE), y)
WEBFLAGS += INCLUDE_LANGUAGE_DE_DE=1
else
WEBFLAGS += INCLUDE_LANGUAGE_DE_DE=0
endif


ifeq ($(INCLUDE_LANGUAGE_FA_FA), y)
WEBFLAGS += INCLUDE_LANGUAGE_FA_FA=1
else
WEBFLAGS += INCLUDE_LANGUAGE_FA_FA=0
endif

ifeq ($(INCLUDE_LANGUAGE_ZH_TW), y)
WEBFLAGS += INCLUDE_LANGUAGE_ZH_TW=1
else
WEBFLAGS += INCLUDE_LANGUAGE_ZH_TW=0
endif

ifeq ($(INCLUDE_LANGUAGE_IT_IT), y)
WEBFLAGS += INCLUDE_LANGUAGE_IT_IT=1
else
WEBFLAGS += INCLUDE_LANGUAGE_IT_IT=0
endif

ifeq ($(INCLUDE_LANGUAGE_KO_KR), y)
WEBFLAGS += INCLUDE_LANGUAGE_KO_KR=1
else
WEBFLAGS += INCLUDE_LANGUAGE_KO_KR=0
endif

ifeq ($(INCLUDE_LANGUAGE_RU_RU), y)
WEBFLAGS += INCLUDE_LANGUAGE_RU_RU=1
else
WEBFLAGS += INCLUDE_LANGUAGE_RU_RU=0
endif

ifeq ($(INCLUDE_LANGUAGE_TR_TR), y)
WEBFLAGS += INCLUDE_LANGUAGE_TR_TR=1
else
WEBFLAGS += INCLUDE_LANGUAGE_TR_TR=0
endif

ifeq ($(INCLUDE_LANGUAGE_PL_PL), y)
WEBFLAGS += INCLUDE_LANGUAGE_PL_PL=1
else
WEBFLAGS += INCLUDE_LANGUAGE_PL_PL=0
endif

ifeq ($(INCLUDE_LANGUAGE_FR_FR), y)
WEBFLAGS += INCLUDE_LANGUAGE_FR_FR=1
else
WEBFLAGS += INCLUDE_LANGUAGE_FR_FR=0
endif

ifeq ($(INCLUDE_LANGUAGE_ES_ES), y)
WEBFLAGS += INCLUDE_LANGUAGE_ES_ES=1
else
WEBFLAGS += INCLUDE_LANGUAGE_ES_ES=0
endif

ifeq ($(INCLUDE_LANGUAGE_ES_LA), y)
WEBFLAGS += INCLUDE_LANGUAGE_ES_LA=1
else
WEBFLAGS += INCLUDE_LANGUAGE_ES_LA=0
endif

ifeq ($(INCLUDE_LANGUAGE_PT_PT), y)
WEBFLAGS += INCLUDE_LANGUAGE_PT_PT=1
else
WEBFLAGS += INCLUDE_LANGUAGE_PT_PT=0
endif

ifeq ($(INCLUDE_LANGUAGE_PT_BR), y)
WEBFLAGS += INCLUDE_LANGUAGE_PT_BR=1
else
WEBFLAGS += INCLUDE_LANGUAGE_PT_BR=0
endif

ifeq ($(INCLUDE_LANGUAGE_EL_GR), y)
WEBFLAGS += INCLUDE_LANGUAGE_EL_GR=1
else
WEBFLAGS += INCLUDE_LANGUAGE_EL_GR=0
endif

ifeq ($(INCLUDE_LANGUAGE_TH_TH), y)
WEBFLAGS += INCLUDE_LANGUAGE_TH_TH=1
else
WEBFLAGS += INCLUDE_LANGUAGE_TH_TH=0
endif

ifeq ($(INCLUDE_LANGUAGE_ID_ID), y)
WEBFLAGS += INCLUDE_LANGUAGE_ID_ID=1
else
WEBFLAGS += INCLUDE_LANGUAGE_ID_ID=0
endif

ifeq ($(INCLUDE_LANGUAGE_RO_RO), y)
WEBFLAGS += INCLUDE_LANGUAGE_RO_RO=1
else
WEBFLAGS += INCLUDE_LANGUAGE_RO_RO=0
endif

ifeq ($(INCLUDE_WEB_REGION), y)
WEBFLAGS += INCLUDE_WEB_REGION=1
else
WEBFLAGS += INCLUDE_WEB_REGION=0
endif

ifeq ($(INCLUDE_DAY_MONTH_YEAR), y)
WEBFLAGS += INCLUDE_DAY_MONTH_YEAR=1
else
WEBFLAGS += INCLUDE_DAY_MONTH_YEAR=0
endif

ifeq ($(INCLUDE_FLASH_VOICEMAIL), y)
WEBFLAGS += INCLUDE_FLASH_VOICEMAIL=1
DFLAGS += -DINCLUDE_FLASH_VOICEMAIL
else
WEBFLAGS += INCLUDE_FLASH_VOICEMAIL=0
endif

ifeq ($(INCLUDE_MAIL), y)
WEBFLAGS += INCLUDE_MAIL=1
DFLAGS += -DINCLUDE_MAIL
else
WEBFLAGS += INCLUDE_MAIL=0
endif

ifeq ($(INCLUDE_USB_3G_BACKUP), y)
WEBFLAGS += INCLUDE_USB_3G_BACKUP=1
DFLAGS += -DINCLUDE_USB_3G_BACKUP
else
WEBFLAGS += INCLUDE_USB_3G_BACKUP=0
endif

ifeq ($(INCLUDE_EWAN_BACKUP), y)
WEBFLAGS += INCLUDE_EWAN_BACKUP=1
DFLAGS += -DINCLUDE_EWAN_BACKUP
else
WEBFLAGS += INCLUDE_EWAN_BACKUP=0
endif

ifeq ($(INCLUDE_CLOUD_UPGRADE), y)
WEBFLAGS += INCLUDE_CLOUD_UPGRADE=1
else
WEBFLAGS += INCLUDE_CLOUD_UPGRADE=0
endif

ifeq ($(INCLUDE_CLOUD_ACCOUNT), y)
WEBFLAGS += INCLUDE_CLOUD_ACCOUNT=1
else
WEBFLAGS += INCLUDE_CLOUD_ACCOUNT=0
endif

ifeq ($(INCLUDE_CHECK_WANALIVE_WITH_RXPTK), y)
DFLAGS += -DINCLUDE_CHECK_WANALIVE_WITH_RXPTK
endif

ifeq ($(INCLUDE_CHECK_WANALIVE_WITH_DNS), y)
DFLAGS += -DINCLUDE_CHECK_WANALIVE_WITH_DNS
endif

ifeq ($(INCLUDE_CHECK_WANALIVE_WITH_NTP), y)
DFLAGS += -DINCLUDE_CHECK_WANALIVE_WITH_NTP
endif

ifeq ($(INCLUDE_DHCP_RELAY), y)
WEBFLAGS += INCLUDE_DHCP_RELAY=1
else
WEBFLAGS += INCLUDE_DHCP_RELAY=0
endif

ifeq ($(INCLUDE_IPV6_HTTP), y)
WEBFLAGS += INCLUDE_IPV6_HTTP=1
else
WEBFLAGS += INCLUDE_IPV6_HTTP=0
endif

ifeq ($(INCLUDE_SPEEDTEST), y)
WEBFLAGS += INCLUDE_SPEEDTEST=1
DFLAGS   += -DINCLUDE_SPEEDTEST
else
WEBFLAGS += INCLUDE_SPEEDTEST=0
endif

ifeq ($(INCLUDE_SFE), y)
WEBFLAGS += INCLUDE_SFE=1
else
WEBFLAGS += INCLUDE_SFE=0
endif

ifeq ($(INCLUDE_SWITCH_MT7621), y)
WEBFLAGS += INCLUDE_SWITCH_MT7621=1
else
WEBFLAGS += INCLUDE_SWITCH_MT7621=0
endif

ifeq ($(INCLUDE_MANAGECTRL_HTTP_ONLY), y)
WEBFLAGS += INCLUDE_MANAGECTRL_HTTP_ONLY=1
else
WEBFLAGS += INCLUDE_MANAGECTRL_HTTP_ONLY=0
endif

ifeq ($(INCLUDE_UDISK_CONFIG), y)
DFLAGS += -DINCLUDE_UDISK_CONFIG
endif

# add for ssl
ifeq ($(INCLUDE_CRYPTO), y)
DFLAGS   += -DINCLUDE_CRYPTO
ifeq ($(INCLUDE_CRYPTO_OPENSSL), y)
DFLAGS   += -DINCLUDE_CRYPTO_OPENSSL
endif
ifeq ($(INCLUDE_CRYPTO_MBEDTLS), y)
DFLAGS   += -DINCLUDE_CRYPTO_MBEDTLS
ifeq ($(INCLUDE_MBEDTLS_WITH_GCRYPT_FOR_DSA), y)
DFLAGS   += -DINCLUDE_MBEDTLS_WITH_GCRYPT_FOR_DSA
endif
endif
endif

ifeq ($(INCLUDE_SSL), y)
DFLAGS   += -DINCLUDE_SSL
ifeq ($(INCLUDE_SSL_OPENSSL), y)
DFLAGS   += -DINCLUDE_SSL_OPENSSL
endif
ifeq ($(INCLUDE_SSL_MBEDTLS), y)
DFLAGS   += -DINCLUDE_SSL_MBEDTLS
endif
endif

ifeq ($(INCLUDE_CHECK_OEMID), y)
DFLAGS   += -DINCLUDE_CHECK_OEMID
endif

ifeq ($(INCLUDE_DOMAIN_TPLINKMODEM), y)
DFLAGS   += -DINCLUDE_DOMAIN_TPLINKMODEM
endif

ifeq ($(INCLUDE_9X07_SMALL_V1), y)
DFLAGS   += -DINCLUDE_9X07_SMALL_V1
endif

ifeq ($(INCLUDE_9X07_SMALL_MR6400V5), y)
DFLAGS   += -DINCLUDE_9X07_SMALL_MR6400V5
endif

ifeq ($(INCLUDE_9X07_SMALL_MR200V5), y)
DFLAGS   += -DINCLUDE_9X07_SMALL_MR200V5
endif

ifeq ($(BETA), 1)
DFLAGS   += -DINCLUDE_BETA_CODE
WEBFLAGS += BETA=1
else
WEBFLAGS += BETA=0
endif

ifeq ($(INCLUDE_MODEM_SMD_RECOVER), y)
DFLAGS   += -DINCLUDE_MODEM_SMD_RECOVER
endif

ifeq ($(INCLUDE_LTE_AUTO_TIMEZONE), y)
DFLAGS += -DINCLUDE_LTE_AUTO_TIMEZONE
endif

ifeq ($(strip $(PRODUCT_REGION_NAME)),)
PRODUCT_REGION_NAME="EU"
endif

DFLAGS += -DPRODUCT_REGION_NAME=\"$(PRODUCT_REGION_NAME)\"

ifeq ($(INCLUDE_FSCK_EXT4), y)
DFLAGS += -DINCLUDE_FSCK_EXT4
else
ifeq ($(INCLUDE_FSCK_EXT3), y)
DFLAGS += -DINCLUDE_FSCK_EXT3
endif
endif

ifeq ($(INCLUDE_LTE_PLMN_LOCK), y)
DFLAGS += -DINCLUDE_LTE_PLMN_LOCK
WEBFLAGS += INCLUDE_LTE_PLMN_LOCK=1
else
WEBFLAGS += INCLUDE_LTE_PLMN_LOCK=0
endif

ifeq ($(INCLUDE_DOMAIN_CFG), y)
DFLAGS += -DINCLUDE_DOMAIN_CFG
WEBFLAGS += INCLUDE_DOMAIN_CFG=1
else
WEBFLAGS += INCLUDE_DOMAIN_CFG=0
endif

ifeq ($(INCLUDE_OPTION66), y)
DFLAGS += -DINCLUDE_OPTION66
DFLAGS += -DINCLUDE_OPTION66_LAN
WEBFLAGS += INCLUDE_OPTION66=1
ifeq ($(INCLUDE_OPTION66_NEED_TAG), y)
DFLAGS += -DINCLUDE_OPTION66_NEED_TAG
endif
ifeq ($(AGILE_CONFIG), 1)
WEBFLAGS += AGILE_CONFIG=1
DFLAGS += -DAGILE_CONFIG
else
WEBFLAGS += AGILE_CONFIG=0
endif
else
WEBFLAGS += INCLUDE_OPTION66=0
endif

ifeq ($(INCLUDE_FLASH_NAND), y)
DFLAGS   += -DINCLUDE_FLASH_NAND
endif

ifeq ($(INCLUDE_DUAL_IMAGE), y)
DFLAGS   += -DINCLUDE_DUAL_IMAGE
endif

ifeq ($(INCLUDE_MTD_TYPE_FS), y)
DFLAGS   += -DINCLUDE_MTD_TYPE_FS
endif

ifeq ($(INCLUDE_FS_TYPE_UBI), y)
DFLAGS   += -DINCLUDE_FS_TYPE_UBI
endif

ifeq ($(INCLUDE_FLASH_BIN_128M), y)
DFLAGS   += -DINCLUDE_FLASH_BIN_128M
endif

ifdef MTD_IMAGE_SIZE
DFLAGS += -DMTD_IMAGE_SIZE=$(MTD_IMAGE_SIZE)
endif

ifdef MTD_BOOT_SIZE
DFLAGS += -DMTD_BOOT_SIZE=$(MTD_BOOT_SIZE)
endif

ifdef MTD_KERNEL_SIZE
DFLAGS += -DMTD_KERNEL_SIZE=$(MTD_KERNEL_SIZE)
endif

ifdef MTD_MISC_SIZE
DFLAGS += -DMTD_MISC_SIZE=$(MTD_MISC_SIZE)
endif

ifdef MTD_BLOCK_SIZE
DFLAGS += -DMTD_BLOCK_SIZE=$(MTD_BLOCK_SIZE)
endif

ifdef MTD_FLASH_SIZE
DFLAGS += -DMTD_FLASH_SIZE=$(MTD_FLASH_SIZE)
endif


ifeq ($(INCLUDE_FWUPGRADE_BOOT_UPDATE), y)
DFLAGS   += -DINCLUDE_FWUPGRADE_BOOT_UPDATE
endif

ifeq ($(INCLUDE_NO_UDISK), y)
DFLAGS   += -DINCLUDE_NO_UDISK
endif

ifeq ($(INCLUDE_LTE_FW_IN_FLASH), y)
DFLAGS   += -DINCLUDE_LTE_FW_IN_FLASH
endif

ifeq ($(INCLUDE_CLI_SH), y)
DFLAGS   += -DINCLUDE_CLI_SH
endif

ifeq ($(INCLUDE_DUAL_CONFIG), y)
DFLAGS   += -DINCLUDE_DUAL_CONFIG
endif

ifeq ($(INCLUDE_DUAL_SMS_DB), y)
DFLAGS   += -DINCLUDE_DUAL_SMS_DB
endif

ifeq ($(INCLUDE_FIREHOSE), y)
DFLAGS   += -DINCLUDE_FIREHOSE
endif

ifeq ($(INCLUDE_POWER_SW), y)
DFLAGS   += -DINCLUDE_POWER_SW
endif

ifneq ($(strip $(MIN_UPGRADE_VERSION)),)
DFLAGS += -DMIN_UPGRADE_VERSION=$(MIN_UPGRADE_VERSION)
endif

ifneq ($(strip $(FW_UPGRADE_TIME)),)
DFLAGS += -DFW_UPGRADE_TIME=$(FW_UPGRADE_TIME)
WEBFLAGS += FW_UPGRADE_TIME=$(FW_UPGRADE_TIME)
else
WEBFLAGS += FW_UPGRADE_TIME=80
endif

ifneq ($(strip $(FW_REBOOT_TIME)),)
DFLAGS += -DFW_REBOOT_TIME=$(FW_REBOOT_TIME)
WEBFLAGS += FW_REBOOT_TIME=$(FW_REBOOT_TIME)
else
WEBFLAGS += FW_REBOOT_TIME=120
endif

ifeq ($(DATACODE), 1)
DFLAGS   += -DINCLUDE_DATA_CODE
WEBFLAGS += DATACODE=1
else
WEBFLAGS += DATACODE=0
endif

ifeq ($(INCLUDE_TP_DOWNLOAD_MODE), y)
DFLAGS   += -DINCLUDE_TP_DOWNLOAD_MODE
endif

ifeq ($(INCLUDE_HT_STREAM_1X1), y)
DFLAGS += -DINCLUDE_HT_STREAM_1X1
endif


######################
export TOOLPREFIX
export HOST
export KERNELPATH

## for kernel compiling
export SUPPLIER_TOOLS

#For install kernel modules
export INSTALL_MOD_PATH
#For code control, placed different target file
export OBJ_DIR
#For function conditional compilation
export DF_FLAGS

export SDK_FLAGS

export TOP_PATH
export OS_LIB_PATH
export PRIVATE_LIB_BIN_PATH
export PRIVATE_APPS_BIN_PATH
export TP_MODULES_PATH

#For complier
export CC
export LD
export AR
export STRIP
export RANLIB


######################
env_build:
ifeq ($(INCLUDE_LTEWAN), y)
ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
	@if test -d $(TOOLCHAIN_PATH); \
	then \
		echo "toolchain $(TOOLCHAIN_PATH) exists." ; \
	else \
		echo "Uncompressing toolchain..." ; \
		mkdir -p $(GCC_PATH);	\
		echo "Using NTPL toolchain..." ; \
		tar -jxf $(TOP_PATH)/$(SUPPLIER)/tools/toolchain/buildroot-gcc463.tar.bz2 -C $(GCC_PATH);\
		cp $(TOP_PATH)/$(SUPPLIER)/tools/toolchain/libstdc++.so.6 $(SLIB_PATH);\
	fi;
	
else
	@if test -d $(TOOLCHAIN_PATH); \
	then \
		echo "toolchain $(TOOLCHAIN_PATH) exists." ; \
	else \
		echo "Uncompressing toolchain..." ; \
		mkdir -p $(GCC_PATH);	\
		echo "Using none NTPL toolchain..." ; \
		tar -jxf $(TOP_PATH)/$(SUPPLIER)/tools/toolchain/buildroot-gcc463_share.tar.bz2 -C $(GCC_PATH);\
		mv $(GCC_PATH)/buildroot-gcc463_share $(GCC_PATH)/buildroot-gcc463; \
	fi;
endif

	@if test -d $(GCC_PATH)/buildroot-gcc342; \
	then \
		echo "toolchain buildroot-gcc342 exists." ; \
	else \
		echo "Uncompressing toolchain..." ; \
		tar -jxf $(TOP_PATH)/$(SUPPLIER)/Uboot/buildroot-gcc342.tar.bz2 -C $(GCC_PATH);\
	fi;

	@ $(TOP_PATH)/$(SUPPLIER)/tools/relocate_toolchain_library.sh $(TOOLCHAIN_PATH) $(OLD_TOOLCHAIN_PREFIX)
	@ test -d $(PRODUCT_BUILD_PATH) || mkdir -p $(PRODUCT_BUILD_PATH)
else
	@if test -d /opt/buildroot-gcc463; \
	then \
		echo "toolchain buildroot-gcc463 exists." ; \
	else \
		echo "Uncompressing toolchain..." ; \
		cp $(TOP_PATH)/$(SUPPLIER)/tools/toolchain/buildroot-gcc463.tar.bz2 /opt/ ;\
		cd /opt && tar -jxf buildroot-gcc463.tar.bz2 && rm -f buildroot-gcc463.tar.bz2 ;\
	fi; 
endif

	@echo "env_build done!"

######################
menuconfig:
	cp $(BUILD_PATH)/config/$(MODEL).config $(BUILD_PATH)/.config
	$(BUILD_PATH)/scripts/config/mconf $(BUILD_PATH)/sysdeps/linux/Config.in
	cp $(BUILD_PATH)/.config $(BUILD_PATH)/config/$(MODEL).config

######################
boot_menuconfig:
	cp -f $(TOP_PATH)/$(SUPPLIER)/Uboot/$(MODEL)_config $(TOP_PATH)/$(SUPPLIER)/Uboot/.config
	cd $(TOP_PATH)/$(SUPPLIER)/Uboot && make menuconfig
	cp -f $(TOP_PATH)/$(SUPPLIER)/Uboot/.config $(TOP_PATH)/$(SUPPLIER)/Uboot/$(MODEL)_config
	cp -f $(TOP_PATH)/$(SUPPLIER)/Uboot/autoconf.h $(TOP_PATH)/$(SUPPLIER)/Uboot/$(MODEL)_autoconf_h
	
boot_build:
	@echo "Make Boot Build"
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_uboot_autoconf_h $(TOP_PATH)/$(SUPPLIER)/Uboot/autoconf.h
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_uboot.config $(TOP_PATH)/$(SUPPLIER)/Uboot/.config
#	cd $(TOP_PATH)/$(SUPPLIER)/Uboot && make CONFIG_CROSS_COMPILER_PATH=$(GCC_PATH)/buildroot-gcc342/bin
	cd $(TOP_PATH)/$(SUPPLIER)/Uboot && make CONFIG_CROSS_COMPILER_PATH=$(UBOOT_TOOLCHAIN_PATH)
	test -d $(BOOT_TG_PATH) || mkdir -p $(BOOT_TG_PATH)
	cp $(TOP_PATH)/$(SUPPLIER)/Uboot/uboot.bin $(BOOT_TG_PATH)/boot_$(MODEL).bin

boot_clean:
	@if test -f $(TOP_PATH)/$(SUPPLIER)/Uboot/Makefile;then \
	echo Making uboot clean; \
	cd $(TOP_PATH)/$(SUPPLIER)/Uboot && make distclean; \
	else echo "Do nothing for clean uboot"; \
	fi


######################
kernel_build:
	@echo "Make Kernel Build"
ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel_NPTL.config $(KERNELPATH)/.config
else
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel.config $(KERNELPATH)/.config
endif
	cd $(KERNELPATH) && $(MAKE) V=2 linux.7z
	test -d $(KERNEL_TG_PATH) || mkdir -p $(KERNEL_TG_PATH)
	cp $(KERNELPATH)/linux.7z $(KERNEL_TG_PATH)/
	cp $(KERNELPATH)/vmlinux $(KERNEL_TG_PATH)/

kernel_menuconfig:
ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel_NPTL.config $(KERNELPATH)/.config
else
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel.config $(KERNELPATH)/.config
endif
	cd $(KERNELPATH) && $(MAKE) menuconfig
	cp $(KERNELPATH)/.config $(KERNELPATH)/$(CPU_TYPE)_$(MODEL)_config
	@echo "Replace Kernel Config File"

kernel_clean:
	cd $(KERNELPATH) && $(MAKE) clean
	rm -rf $(KERNEL_TG_PATH)


######################
.PHONY: kernel_modules
kernel_modules:
	@echo "Making Kernel Modules"
ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel_NPTL.config $(KERNELPATH)/.config
else
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel.config $(KERNELPATH)/.config
endif
	cd $(KERNELPATH) && $(MAKE) modules

ifeq ($(strip $(INCLUDE_COMBINED_IMAGE)),y)
ifeq ($(INCLUDE_NPTL_TOOLCHAIN), y)
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel_NPTL_7612.config $(KERNELPATH)/.config
else
	cp $(BUILD_PATH)/config/$(MODEL)/$(MODEL)_kernel_7612.config $(KERNELPATH)/.config
endif
	cd $(KERNELPATH) && $(MAKE) modules
endif
	cd $(KERNELPATH) && $(MAKE) DEPMOD=true modules_install

ifeq ($(strip $(INCLUDE_COMBINED_IMAGE)),y)
	mkdir -p $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/drivers/net/wireless/MT7610_ap
	cp -p $(MT7610E_DIR)/MT7610_ap.ko $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/drivers/net/wireless/MT7610_ap
endif


.PHONY: kernel_modules_install
kernel_modules_install:
	cp -pR $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel $(MODULE_TG_PATH)/kmdir/
	cp -pR $(SUPPLIER_PATH)/modules/private/* $(MODULE_TG_PATH)/

ifeq ($(INCLUDE_L2TP), y)
	cp -p $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/net/l2tp/l2tp_core.ko $(MODULE_TG_PATH)/pppol2tp.ko
	cp -p $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/net/l2tp/l2tp_ppp.ko $(MODULE_TG_PATH)/l2tp_ppp.ko
	rm $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/net/l2tp/*.ko
	rm $(MODULE_TG_PATH)/kmdir/kernel/net/l2tp/*.ko
else
	rm $(INSTALL_MOD_PATH)/lib/modules/$(KERNELVERSION)/kernel/net/l2tp/*.ko
	rm $(MODULE_TG_PATH)/kmdir/kernel/net/l2tp/*.ko
endif
.PHONY: pptp_module
pptp_module:
	echo "build pptp_module"
	cd $(SUPPLIER_PATH)/modules/public/accel-pptp-0.8.5
	cd $(TOP_PATH)/$(SUPPLIER)/modules/public/accel-pptp-0.8.5 && $(MAKE)
	cp -p $(TOP_PATH)/$(SUPPLIER)/modules/public/accel-pptp-0.8.5/pptp.ko $(MODULE_TG_PATH)

.PHONY: pptp_module_clean
pptp_module_clean:
	echo "clean pptp_module"
	cd $(TOP_PATH)/$(SUPPLIER)/modules/public/accel-pptp-0.8.5 && $(MAKE) clean

.PHONY: pptp_module_install
pptp_module_install:
	echo "install pptp_module"
	cp -p $(TOP_PATH)/$(SUPPLIER)/modules/public/accel-pptp-0.8.5/pptp.ko $(MODULE_TG_PATH)
all_modules_install: modules_install_dir kernel_modules_install pptp_module_install
modules_build: kernel_modules  pptp_module all_modules_install
modules_clean: pptp_module_clean

modules_install_dir:
	rm -rf $(MODULE_TG_PATH) && mkdir -p $(MODULE_TG_PATH) && mkdir -p $(MODULE_TG_PATH)/kmdir/

######################
.PHONY:oslibs
oslibs:
	@echo "build oslibs"
	cd $(PUBLIC_APPS_PATH)/os_libs && $(MAKE)

.PHONY: oslibs_install
oslibs_install:
	@echo "install oslibs"
	cp -P $(OS_LIB_PATH)/libos.so $(PUBLIC_APPS_PATH)/install/lib

.PHONY: oslibs_clean
oslibs_clean:
	@echo "clean oslibs"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/os_libs clean
.PHONY: busybox
busybox:
	@echo "build busybox"
	cd $(PUBLIC_APPS_PATH)/busybox-1.23.2
	test -e  $(PUBLIC_APPS_PATH)/busybox-1.23.2/.config || (test -e config/$(MODEL)/busybox.config && cp config/$(MODEL)/busybox.config  $(PUBLIC_APPS_PATH)/busybox-1.23.2/.config) || cp config/busybox.config  $(PUBLIC_APPS_PATH)/busybox-1.23.2/.config
	test -e  $(PUBLIC_APPS_PATH)/busybox-1.23.2/include || mkdir $(PUBLIC_APPS_PATH)/busybox-1.23.2/include
ifeq ($(findstring DINCLUDE_UDISK_AUTO,$(DF_FLAGS)), DINCLUDE_UDISK_AUTO)
	cd $(PUBLIC_APPS_PATH)/busybox-1.23.2 && $(MAKE) CROSS_COMPILE=$(TOOLPREFIX) CFLAGS+=-DINCLUDE_UDISK_AUTO
else
	cd $(PUBLIC_APPS_PATH)/busybox-1.23.2 && $(MAKE) CROSS_COMPILE=$(TOOLPREFIX)
endif

.PHONY: busybox_install
busybox_install:
	@echo "install busybox"
ifeq ($(findstring DINCLUDE_UDISK_AUTO,$(DF_FLAGS)), DINCLUDE_UDISK_AUTO)
	cd $(PUBLIC_APPS_PATH)/busybox-1.23.2 && $(MAKE) install CONFIG_PREFIX=$(PUBLIC_APPS_PATH)/install CROSS_COMPILE=$(TOOLPREFIX) CFLAGS+=-DINCLUDE_UDISK_AUTO
else
	cd $(PUBLIC_APPS_PATH)/busybox-1.23.2 && $(MAKE) install CONFIG_PREFIX=$(PUBLIC_APPS_PATH)/install CROSS_COMPILE=$(TOOLPREFIX)
endif

.PHONY: busybox_clean
busybox_clean:
	@echo "clean busybox"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/busybox-1.23.2 clean
.PHONY: iproute2
iproute2:
	@echo "build iproute2"
	cd $(PUBLIC_APPS_PATH)/iproute2-2.6.39 && $(MAKE)

.PHONY: iproute2_install
iproute2_install:
	@echo "install iproute2"
	cp -p $(PUBLIC_APPS_PATH)/iproute2-2.6.39/tc/tc $(PUBLIC_APPS_PATH)/install/usr/bin
	cp -p $(PUBLIC_APPS_PATH)/iproute2-2.6.39/ip/ip $(PUBLIC_APPS_PATH)/install/usr/bin

.PHONY: iproute2_clean
iproute2_clean:
	@echo "clean iproute2"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/iproute2-2.6.39  clean
.PHONY: iptables
iptables:
	@echo "build iptables"
	cd $(PUBLIC_APPS_PATH)/iptables-1.4.17 && test -e Makefile || ( touch ./* && ./configure --host=mips-linux-uclibc --enable-static --disable-shared )
	cd $(PUBLIC_APPS_PATH)/iptables-1.4.17 && $(MAKE) AR=$(TOOLPREFIX)ar

.PHONY: iptables_install
iptables_install:
	@echo "install iptables"
	cp -p $(PUBLIC_APPS_PATH)/iptables-1.4.17/iptables/xtables-multi $(PUBLIC_APPS_PATH)/install/usr/bin
	cd $(PUBLIC_APPS_PATH)/install/usr/bin && ln -sf xtables-multi iptables
ifeq ($(INCLUDE_IPV6), y)
	cd $(PUBLIC_APPS_PATH)/install/usr/bin && ln -sf xtables-multi ip6tables
endif

.PHONY: iptables_clean
iptables_clean:
	@echo "clean iptables"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/iptables-1.4.17 clean
.PHONY: ebtables
ebtables:
	@echo "build ebtables"
	cd $(PUBLIC_APPS_PATH)/ebtables-v2.0.10 && $(MAKE) static

.PHONY: ebtables_install
ebtables_install:
	@echo "install ebtables"
	cp -p $(PUBLIC_APPS_PATH)/ebtables-v2.0.10/ebtables $(PUBLIC_APPS_PATH)/install/usr/bin

.PHONY: ebtables_clean
ebtables_clean:
	@echo "clean ebtables"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/ebtables-v2.0.10 clean
.PHONY: upnplib
upnplib:
	@echo "build upnplib"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/upnp_libs

.PHONY: upnplib_install
upnplib_install:
	@echo "install upnplib"
	cp --no-dereference -p $(PUBLIC_APPS_PATH)/upnp_libs/*.so $(PUBLIC_APPS_PATH)/install/lib/

.PHONY: upnplib_clean
upnplib_clean:
	@echo "clean upnplib"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/upnp_libs clean
.PHONY: upnp
upnp:
	@echo "build upnp"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/IGD

.PHONY: upnp_install
upnp_install:
	@echo "install upnp"
	cp -p $(PUBLIC_APPS_PATH)/IGD/upnpd $(PUBLIC_APPS_PATH)/install/usr/bin

.PHONY: upnp_clean
upnp_clean:
	@echo "clean upnp"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/IGD clean
.PHONY: mbedtls
mbedtls:
	@echo "build mbedtls"
ifeq ($(findstring DINCLUDE_SSL,$(DF_FLAGS)), DINCLUDE_SSL)
	cd $(PUBLIC_APPS_PATH)/mbedtls-2.17 && $(MAKE) SHARED=1 && $(MAKE) install DESTDIR=$(PUBLIC_APPS_PATH)/mbedtls-2.17/install
else
	cd $(PUBLIC_APPS_PATH)/mbedtls-2.17 \
    && CFLAGS="-I$(PUBLIC_APPS_PATH)/mbedtls-2.17/configs -DMBEDTLS_CONFIG_FILE='<config-mini-crypto.h>'"\
    $(MAKE) CC=$(CC) LD=$(LD) SHARED=1 install DESTDIR=$(PUBLIC_APPS_PATH)/mbedtls-2.17/install
endif

.PHONY: mbedtls_install
mbedtls_install:
	@echo "install mbedtls"
	cp --no-dereference $(PUBLIC_APPS_PATH)/mbedtls-2.17/crypto/library/libmbedcrypto.so* $(PUBLIC_APPS_PATH)/install/lib/
	cp --no-dereference $(PUBLIC_APPS_PATH)/mbedtls-2.17/library/libmbedtls.so* $(PUBLIC_APPS_PATH)/install/lib/
	cp --no-dereference $(PUBLIC_APPS_PATH)/mbedtls-2.17/library/libmbedx509.so* $(PUBLIC_APPS_PATH)/install/lib/
	cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/pkey/gen_key $(PUBLIC_APPS_PATH)/install/usr/sbin
	cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/x509/cert_write $(PUBLIC_APPS_PATH)/install/usr/sbin
	#cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/ssl/ssl_client1 $(PUBLIC_APPS_PATH)/install/usr/bin
	#cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/ssl/ssl_server $(PUBLIC_APPS_PATH)/install/usr/bin
	#cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/ssl/ssl_client2 $(PUBLIC_APPS_PATH)/install/usr/bin
	#cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/programs/ssl/ssl_server2 $(PUBLIC_APPS_PATH)/install/usr/bin
ifeq ($(findstring DINCLUDE_UPDATE_UDISK_BY_ROUTER,$(DF_FLAGS)), DINCLUDE_UPDATE_UDISK_BY_ROUTER)
	cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/install/bin/mbedtls_aes-128-ecb $(PUBLIC_APPS_PATH)/install/usr/bin
else ifeq ($(findstring DINCLUDE_ASR_AT,$(DF_FLAGS)), DINCLUDE_ASR_AT)
	cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/install/bin/mbedtls_aes-128-ecb $(PUBLIC_APPS_PATH)/install/usr/bin
else ifeq ($(findstring DINCLUDE_MTD_TYPE_FS,$(DF_FLAGS)), DINCLUDE_MTD_TYPE_FS)
	cp -p $(PUBLIC_APPS_PATH)/mbedtls-2.17/install/bin/mbedtls_aes-128-ecb $(PUBLIC_APPS_PATH)/install/usr/bin
endif

.PHONY: mbedtls_clean
mbedtls_clean:
	@echo "clean mbedtls"
	cd $(PUBLIC_APPS_PATH)/mbedtls-2.17 && $(MAKE) clean
.PHONY: pppd
pppd:
	@echo "build pppd"
	cd $(PUBLIC_APPS_PATH)/ppp-2.4.5
ifeq ($(INCLUDE_PPTPVPN_SERVER), y)
	cd $(PUBLIC_APPS_PATH)/ppp-2.4.5/pppd && $(MAKE) MPPE=y #INCLUDE_IPV6_PPPV6=$(INCLUDE_IPV6_PPPV6)
else
	cd $(PUBLIC_APPS_PATH)/ppp-2.4.5/pppd && $(MAKE) #INCLUDE_IPV6_PPPV6=$(INCLUDE_IPV6_PPPV6)
endif

.PHONY: pppd_install
pppd_install:
	@echo "install pppd"
	cp -p $(PUBLIC_APPS_PATH)/ppp-2.4.5/pppd/pppd $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: pppd_clean
pppd_clean:
	@echo "clean pppd"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/ppp-2.4.5/pppd clean
.PHONY: ripd
ripd:
	@echo "build ripd"
	cd $(PUBLIC_APPS_PATH)/zebra-0.95a && touch ./*
	$(MAKE) -C $(PUBLIC_APPS_PATH)/zebra-0.95a

.PHONY: ripd_install
ripd_install:
	@echo "install ripd"
	cp -p $(PUBLIC_APPS_PATH)/zebra-0.95a/ripd/ripd $(PUBLIC_APPS_PATH)/install/usr/sbin
	cp -p $(PUBLIC_APPS_PATH)/zebra-0.95a/zebra/zebra $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: ripd_clean
ripd_clean:
	@echo "clean ripd"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/zebra-0.95a clean
.PHONY: flex
flex:
	@echo "build flex"
	cd $(PUBLIC_APPS_PATH)/flex-2.5.35 && test -e Makefile || ./configure --host=mips-linux 
	cd $(PUBLIC_APPS_PATH)/flex-2.5.35 && $(MAKE)
	mkdir -p $(PUBLIC_APPS_PATH)/lib
	cp -p $(PUBLIC_APPS_PATH)/flex-2.5.35/libfl.a $(PUBLIC_APPS_PATH)/lib

.PHONY: flex_install
flex_install:
	@echo "install flex"

.PHONY: flex_clean
flex_clean:
	@echo "clean flex"
	cd $(PUBLIC_APPS_PATH)/flex-2.5.35 && test -e Makefile || ./configure --host=mips-linux 
	cd $(PUBLIC_APPS_PATH)/flex-2.5.35 && $(MAKE) clean
	rm -rf $(PUBLIC_APPS_PATH)/lib
.PHONY: radvd
radvd:
	@echo "build radvd"
	cd $(PUBLIC_APPS_PATH)/radvd-1.5 && test -e Makefile || ( touch ./* && ./configure --host=mips-linux)
	cd $(PUBLIC_APPS_PATH)/radvd-1.5 && $(MAKE)

.PHONY: radvd_install
radvd_install:
	@echo "install radvd"
	cp -p $(PUBLIC_APPS_PATH)/radvd-1.5/radvd $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: radvd_clean
radvd_clean:
	@echo "clean radvd"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/radvd-1.5 clean
.PHONY: dhcpv6
dhcpv6:
	@echo "build dhcpv6"
	cd $(PUBLIC_APPS_PATH)/wide-dhcpv6 && $(MAKE)

.PHONY: dhcpv6_install
dhcpv6_install:
	@echo "install dhcpv6"
	cp -p $(PUBLIC_APPS_PATH)/wide-dhcpv6/dhcp6s $(PUBLIC_APPS_PATH)/install/usr/sbin
	cp -p $(PUBLIC_APPS_PATH)/wide-dhcpv6/dhcp6c $(PUBLIC_APPS_PATH)/install/usr/sbin
	cp -p $(PUBLIC_APPS_PATH)/wide-dhcpv6/dhcp6ctl $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: dhcpv6_clean
dhcpv6_clean:
	@echo "clean dhcpv6"
	$(MAKE) -C $(PUBLIC_APPS_PATH)/wide-dhcpv6 clean
.PHONY:npd6
npd6:
	@echo "build npd6"
	cd $(PUBLIC_APPS_PATH)/npd6-1.1.0 && $(MAKE) clean && $(MAKE)

.PHONY: npd6_install
npd6_install:
	@echo "install npd6"
	cp -p $(PUBLIC_APPS_PATH)/npd6-1.1.0/npd6 $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: npd6_clean
npd6_clean:
	@echo "clean npd6"
	cd $(PUBLIC_APPS_PATH)/npd6-1.1.0 && $(MAKE) clean
.PHONY: libcJSON
libcJSON:
	@echo "build libcJSON"
	cd $(PUBLIC_APPS_PATH)/libcJSON && $(MAKE) clean && $(MAKE)

.PHONY: libcJSON_install
libcJSON_install:
	@echo "install libcJSON"
	cp $(PUBLIC_APPS_PATH)/libcJSON/libMPcJSON.so $(PUBLIC_APPS_PATH)/install/lib/

.PHONY: libcJSON_clean
libcJSON_clean:
	@echo "clean libcJSON"
	cd $(PUBLIC_APPS_PATH)/libcJSON && $(MAKE) clean
.PHONY: xl2tpd
xl2tpd:
	@echo "build xl2tpd"
	cd $(PUBLIC_APPS_PATH)/xl2tpd-1.1.12 && $(MAKE)

.PHONY: xl2tpd_install
xl2tpd_install:
	@echo "install xl2tpd"
	cp -p $(PUBLIC_APPS_PATH)/xl2tpd-1.1.12/xl2tpd $(PUBLIC_APPS_PATH)/install/usr/sbin

.PHONY: xl2tpd_clean
xl2tpd_clean:
	@echo "clean xl2tpd"
	cd $(PUBLIC_APPS_PATH)/xl2tpd-1.1.12 && $(MAKE) clean
.PHONY: dropbear
dropbear:
	@echo "build dropbear"
	cd $(PUBLIC_APPS_PATH)/dropbear && $(MAKE) MULTI=1 SCPPROGRESS=1

.PHONY: dropbear_install
dropbear_install:
	@echo "install dropbear"
	cp -p $(PUBLIC_APPS_PATH)/dropbear/dropbearmulti $(PUBLIC_APPS_PATH)/install/usr/bin
	cd $(PUBLIC_APPS_PATH)/install/usr/bin && ln -s dropbearmulti dropbear
	cd $(PUBLIC_APPS_PATH)/install/usr/bin && ln -s dropbearmulti dropbearkey
	cd $(PUBLIC_APPS_PATH)/install/usr/bin && ln -s dropbearmulti scp

.PHONY: dropbear_clean
dropbear_clean:
	@echo "clean dropbear"
	cd $(PUBLIC_APPS_PATH)/dropbear && $(MAKE) clean
.PHONY:curl
curl:
	@echo "build curl"
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && test -e Makefile && $(MAKE) clean && rm -rf ./install && rm Makefile || echo "no makefile"
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && test -e configure || ./buildconf
ifeq ($(INCLUDE_CLOUD_ACCOUNT), y)
ifeq ($(INCLUDE_SSL_OPENSSL), y)
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && test -e Makefile || (export LDFLAGS="-Wl,-rpath=$(PUBLIC_APPS_PATH)/openssl-1.0.2q/lib" &&\
	./configure shared --prefix=$(PUBLIC_APPS_PATH)/curl-7.66.0/install \
				--build=i686-linux --host=$(HOST) \
				--disable-ftp --disable-ldap --disable-ldaps --disable-rtsp --disable-proxy --disable-dict \
				--disable-telnet --disable-tftp --disable-pop3 --disable-imap --disable-smtp --disable-gopher \
				--disable-ipv6 --disable-sspi --disable-crypto-auth --disable-ntlm-wb --disable-tls-srp \
				--disable-cookies --disable-soname-bump --disable-threaded-resolver --disable-pthreads \
				--with-ssl=$(PUBLIC_APPS_PATH)/openssl-1.0.2q \
				--without-zlib)
endif
ifeq ($(INCLUDE_SSL_MBEDTLS), y)
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && test -e Makefile || (export LDFLAGS="-Wl,-rpath=$(PUBLIC_APPS_PATH)/mbedtls-2.17/install/lib" && export CPPFLAGS=" -I$(PUBLIC_APPS_PATH)/mbedtls-2.17/crypto/include" && \
	./configure shared --prefix=$(PUBLIC_APPS_PATH)/curl-7.66.0/install \
				--build=i686-linux --host=$(HOST) \
				--disable-ftp --disable-ldap --disable-ldaps --disable-rtsp --disable-proxy --disable-dict \
				--disable-telnet --disable-tftp --disable-pop3 --disable-imap --disable-smtp --disable-gopher \
				--disable-ipv6 --disable-sspi --disable-crypto-auth --disable-ntlm-wb --disable-tls-srp \
				--disable-cookies --disable-soname-bump --disable-threaded-resolver --disable-pthreads \
				--with-mbedtls=$(PUBLIC_APPS_PATH)/mbedtls-2.17/install \
				--without-zlib)
endif
else
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && test -e Makefile || \
	./configure --prefix=$(PUBLIC_APPS_PATH)/curl-7.66.0/install \
 				--build=i686-linux --host=$(HOST) \
				--disable-ftp --disable-ldap --disable-ldaps --disable-rtsp --disable-proxy --disable-dict \
 				--disable-telnet --disable-tftp --disable-pop3 --disable-imap --disable-smtp --disable-gopher \
 				--disable-ipv6 --disable-sspi --disable-crypto-auth --disable-ntlm-wb --disable-tls-srp \
 				--disable-cookies --disable-soname-bump --disable-threaded-resolver --disable-pthreads \
				--without-ssl --without-zlib
endif
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && $(MAKE) install

.PHONY: curl_install
curl_install:
	@echo "install curl"
	cp --no-dereference -p $(PUBLIC_APPS_PATH)/curl-7.66.0/install/lib/*.so* $(PUBLIC_APPS_PATH)/install/lib/

.PHONY: curl_clean
curl_clean:
	@echo "clean curl"
	cd $(PUBLIC_APPS_PATH)/curl-7.66.0 && $(MAKE) clean && rm -rf ./install
.PHONY: libsqlite
libsqlite:
	@echo "build libsqlite"
	cd $(PUBLIC_APPS_PATH)/sqlite-autoconf-3160200 && autoreconf -fi;
	cd $(PUBLIC_APPS_PATH)/sqlite-autoconf-3160200 && ./configure --host=$(HOST) CFLAGS="-Os" \
	--enable-dynamic-extensions=no --enable-readline=no
	cd $(PUBLIC_APPS_PATH)/sqlite-autoconf-3160200 && $(MAKE)
	#$(STRIP) $(PUBLIC_APPS_PATH)/sqlite-autoconf-3160200/.libs/libsqlite3.so.0.8.6

.PHONY: libsqlite_install
libsqlite_install:
	@echo "install libsqlite"
	cp $(PUBLIC_APPS_PATH)/sqlite-autoconf-3160200/.libs/libsqlite3.so.0.8.6 $(PUBLIC_APPS_PATH)/install/lib/

.PHONY: libsqlite_clean
libsqlite_clean:
	@echo "clean libsqlite"

apps_build: oslibs busybox iproute2 iptables ebtables upnplib upnp mbedtls pppd ripd flex radvd dhcpv6 npd6 libcJSON xl2tpd dropbear curl libsqlite pub_apps_install_dir oslibs_install busybox_install iproute2_install iptables_install ebtables_install upnplib_install upnp_install mbedtls_install pppd_install ripd_install flex_install radvd_install dhcpv6_install npd6_install libcJSON_install xl2tpd_install dropbear_install curl_install libsqlite_install supplier_apps_build
apps_clean: oslibs_clean busybox_clean iproute2_clean iptables_clean ebtables_clean upnplib_clean upnp_clean mbedtls_clean pppd_clean ripd_clean flex_clean radvd_clean dhcpv6_clean npd6_clean libcJSON_clean xl2tpd_clean dropbear_clean curl_clean libsqlite_clean

.PHONY:pub_apps_install_dir
pub_apps_install_dir:
	@rm -rf $(PUBLIC_APPS_PATH)/install
	@mkdir -p $(PUBLIC_APPS_PATH)/install
	@mkdir -p $(PUBLIC_APPS_PATH)/install/etc
	@mkdir -p $(PUBLIC_APPS_PATH)/install/lib
	@mkdir -p $(PUBLIC_APPS_PATH)/install/usr/bin
	@mkdir -p $(PUBLIC_APPS_PATH)/install/usr/sbin

######################
.PHONY: wirelesstool
wirelesstool:
	@echo "build wirelesstool"
	cd $(SUPPLIER_PATH)/modules/public/wireless_tools.29
	cd $(SUPPLIER_PATH)/modules/public/wireless_tools.29 &&  make realclean && make all

.PHONY: wirelesstool_install
wirelesstool_install:
	@echo "install wirelesstool"
	cp -pf $(WIRELESSTOOLS)/ated_tp $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
	cp -pf $(WIRELESSTOOLS)/$(WIRELESSTOOLSLIB) $(TOP_PATH)/$(SUPPLIER)/install/public/lib
	cp -pf $(WIRELESSTOOLS)/iwpriv $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
	cp -pf $(WIRELESSTOOLS)/iwconfig $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
	#cp -pf $(WIRELESSTOOLS)/iwlist $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
	#cp -pf $(WIRELESSTOOLS)/wlNetlinkTool $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin

.PHONY: wirelesstool_clean
wirelesstool_clean:
	@echo "clean wirelesstool"
	cd $(WIRELESSTOOLS) &&  make realclean
.PHONY: rt2860apd
rt2860apd:
	@echo "build rt2860apd"
	cd $(SUPPLIER_PATH)/modules/public/8021x
	cd $(WIRELESSTOOLS)/../8021x &&  make clean && make all

.PHONY: rt2860apd_install
rt2860apd_install:
	@echo "install rt2860apd"
	cp -f $(WIRELESSTOOLS)/../8021x/rt2860apd $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
	cd $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin && ln -sf rt2860apd rtinicapd

.PHONY: rt2860apd_clean
rt2860apd_clean:
	@echo "clean rt2860apd"
	cd $(WIRELESSTOOLS)/../8021x &&  make clean
.PHONY: wscd
wscd:
	@echo "build wscd"
	cd $(SUPPLIER_PATH)/modules/public/wsc_upnp/wsc_upnp && cd libupnp-1.3.1 && rm -f Makefile && ./configure --host=mips-linux CFLAGS="-g -O2 -Wall -mips1";
	cd $(SUPPLIER_PATH)/modules/public/wsc_upnp/wsc_upnp && make clean && make all

.PHONY: wscd_install
wscd_install:
	@echo "install wscd"
	cp -f $(SUPPLIER_PATH)/modules/public/wsc_upnp/wsc_upnp/wscd $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin
ifeq ($(INCLUDE_LAN_WLAN_DUALBAND), y)
	cd $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin && ln -sf wscd wscd_5G
endif

.PHONY: wscd_clean
wscd_clean:
	@echo "clean wscd"
	cd $(SUPPLIER_PATH)/modules/public/wsc_upnp/wsc_upnp && make clean
.PHONY: ated
ated:
	@echo "build MTK QA tool"
	cd $(SUPPLIER_PATH)/modules/public/ated &&  make clean && make all

.PHONY: ated_install
ated_install:
	@echo "install MTK QA tool"
	cp -pf $(SUPPLIER_PATH)/modules/public/ated/ated $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin

.PHONY: ated_clean
ated_clean:
	@echo "clean wirelesstool"
	cd $(SUPPLIER_PATH)/modules/public/ated &&  make clean
supplier_apps_build:  wirelesstool rt2860apd wscd ated supplier_pub_install_dir wirelesstool_install rt2860apd_install wscd_install ated_install
supplier_apps_clean: wirelesstool_clean rt2860apd_clean wscd_clean ated_clean

.PHONY:supplier_pub_install_dir
supplier_pub_install_dir:
	@rm -rf $(TOP_PATH)/$(SUPPLIER)/install/public
	@mkdir -p $(TOP_PATH)/$(SUPPLIER)/install/public
	@mkdir -p $(TOP_PATH)/$(SUPPLIER)/install/public/lib
	@mkdir -p $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin

######################
.PHONY: fs_libs
fs_libs:
	test -d $(MODEL_FS_PATH)/lib || mkdir $(MODEL_FS_PATH)/lib
	cp --no-dereference -P $(SLIB_PATH)/*.so* $(MODEL_FS_PATH)/lib/
	cp --no-dereference -P $(OS_LIB_PATH)/libos.so $(MODEL_FS_PATH)/lib
	cp --no-dereference -P $(PRIVATE_APPS_PATH)/install/lib/* $(MODEL_FS_PATH)/lib
	cp --no-dereference -P -r $(PUBLIC_APPS_PATH)/install/lib/* $(MODEL_FS_PATH)/lib

.PHONY:fs_bins
fs_bins:
	test -d $(MODEL_FS_PATH)/usr || mkdir $(MODEL_FS_PATH)/usr
	test -d $(MODEL_FS_PATH)/usr/bin || mkdir $(MODEL_FS_PATH)/usr/bin
	cp --no-dereference -P $(PUBLIC_APPS_PATH)/install/usr/bin/* $(MODEL_FS_PATH)/usr/bin
	cp --no-dereference -P $(PUBLIC_APPS_PATH)/install/usr/sbin/* $(MODEL_FS_PATH)/usr/sbin
	cp --no-dereference -P $(PUBLIC_APPS_PATH)/install/bin/* $(MODEL_FS_PATH)/bin
	cp --no-dereference -P $(PUBLIC_APPS_PATH)/install/sbin/* $(MODEL_FS_PATH)/sbin
	cp --no-dereference -P $(PRIVATE_APPS_PATH)/install/usr/bin/* $(MODEL_FS_PATH)/usr/bin
	test -f $(PRIVATE_APPS_PATH)/install/usr/sbin/* && cp --no-dereference -P $(PRIVATE_APPS_PATH)/install/usr/sbin/* $(MODEL_FS_PATH)/usr/sbin || echo "nothing"
	if [ "$$(ls -A $(PUBLIC_APPS_PATH)/install/etc)" != "" ] ; then cp --no-dereference -rP $(PUBLIC_APPS_PATH)/install/etc/* $(MODEL_FS_PATH)/etc; fi
	if [ "$$(ls -A $(PRIVATE_APPS_PATH)/install/etc)" != "" ] ; then cp --no-dereference -rP $(PRIVATE_APPS_PATH)/install/etc/* $(MODEL_FS_PATH)/etc; fi
ifeq ($(INCLUDE_IPSEC_STRONGSWAN), y)
	mkdir -p $(MODEL_FS_PATH)/libexec/ipsec
	cp --no-dereference -P -r $(PUBLIC_APPS_PATH)/install/libexec/ipsec/* $(MODEL_FS_PATH)/libexec/ipsec
endif
	cp --no-dereference -P $(PUBLIC_APPS_PATH)/install/linuxrc $(MODEL_FS_PATH)
ifeq ($(INCLUDE_PPTPVPN_SERVER), y)
	cd $(MODEL_FS_PATH) && ln -sf /var/pptpd/chap-secrets ./etc/ppp/chap-secrets
endif
.PHONY:fs_modules
fs_modules:
	test -d $(MODEL_FS_PATH)/lib || mkdir $(MODEL_FS_PATH)/lib
	test -d $(MODEL_FS_PATH)/lib/modules || mkdir $(MODEL_FS_PATH)/lib/modules
	test -d $(LIB_TG_PATH) || (mkdir $(LIB_TG_PATH) && mkdir $(LIB_TG_PATH)/firmware)
	cp -pR $(MODULE_TG_PATH)/* $(MODEL_FS_PATH)/lib/modules
	test -d $(TP_MODULES_PATH)/ko/ ||  mkdir -p $(TP_MODULES_PATH)/ko/
	find $(TP_MODULES_PATH)/ko/ -name "*.ko" -exec cp {} $(MODEL_FS_PATH)/lib/modules \;


.PHONY:datafiles
datafiles:
ifeq ($(INCLUDE_COMBINED_IMAGE), y)
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/dual_band_default_config.xml $(MODEL_FS_PATH)/etc/dual_band_default_config.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/single_band_default_config.xml $(MODEL_FS_PATH)/etc/single_band_default_config.xml
ifeq ($(strip $(DEBUG)), MR400)
	$(TOOLS_PATH)/mkcfg -m  $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_full_debug_MR400.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_empty.xml -o $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml
else
ifeq ($(strip $(DEBUG)), MR200)
	$(TOOLS_PATH)/mkcfg -m  $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_full_debug_MR200.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_empty.xml -o $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml
else
	$(TOOLS_PATH)/mkcfg -m  $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_full.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_empty.xml -o $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml
endif
endif
	$(TOOLS_PATH)/mkcfg -m $(CONFFILE_PATH)/common/reduced_data_model.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_empty.xml -o $(MODEL_FS_PATH)/etc/reduced_data_model.xml

	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR200.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR200.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR400.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR400.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR6400.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR6400.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR200V4.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR200V4.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR6400V4.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR6400V4.xml
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model_MR400V3.xml $(MODEL_FS_PATH)/etc/reduced_data_model_MR400V3.xml

	test -f $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml && $(TOOLS_PATH)/mkcfg -m $(CONFFILE_PATH)/oem/$(MODEL)/dual_band_default_config.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml -o $(MODEL_FS_PATH)/../fac_config_$(MODEL).xml || echo "$(BUILD_PATH)/config/$(MODEL)/$(REGION)/flash_config.xml not found, do not generate merged flash config file."

	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/dual_band_default_config.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/single_band_default_config.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR200.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR400.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR6400.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR200V4.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR6400V4.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model_MR400V3.xml
else

	cp -pR $(CONFFILE_PATH)/common/default_config.xml $(MODEL_FS_PATH)/etc/default_config.xml
ifeq ($(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_default_config.xml, $(wildcard $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_default_config.xml))
	cp -pR $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_default_config.xml $(MODEL_FS_PATH)/etc/default_config.xml
endif

	$(TOOLS_PATH)/mkcfg -m $(CONFFILE_PATH)/common/reduced_data_model.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/reduced_data_model.xml -o $(MODEL_FS_PATH)/etc/reduced_data_model.xml
	cp -pR $(MODEL_FS_PATH)/etc/reduced_data_model.xml $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml

	test -f $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml && $(TOOLS_PATH)/mkcfg -m $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_default_config.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml -o $(MODEL_FS_PATH)/../fac_config_$(MODEL).xml || \
	echo "$(BUILD_PATH)/config/$(MODEL)/$(REGION)/flash_config.xml not found, do not generate merged flash config file."

	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/default_config.xml
	$(TOOLS_PATH)/enc -e -i $(MODEL_FS_PATH)/etc/reduced_data_model.xml
endif

.PHONY:fs_sysfiles
fs_sysfiles: 
ifeq ($(strip $(DEBUG)), MR400)
	cd $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless && rm -rf MT7610_ap
endif

ifeq ($(strip $(DEBUG)), MR200)
	cd $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless && rm -rf MT7612_ap
endif

ifeq ($(strip $(INCLUDE_USB_3G_DONGLE)),)
ifeq ($(INCLUDE_RMNET_QMI), y)
ifeq ($(INCLUDE_FLASH_8M), y)

	cd $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/usb && rm -f asix.ko cdc_enc.ko cdc_ether.ko cdc_ncm.ko cdc_subset.ko huawei_cdc_ncm.ko lg-vl600.ko net1080.ko rndis_host.ko zaurus.ko 
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/usb/serial/usb_wwan.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/usb/serial/option.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/usb/class/cdc-acm.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/nat/fast-classifier/fast-classifier.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/netfilter/qos-appidentify/extentions
	rm -rf $(MODEL_FS_PATH)/usr/bin/mmtd
#	rm -rf $(MODEL_FS_PATH)/usr/bin/mobile_cli
	
	rm -rf $(MODEL_FS_PATH)/web/xml/log.txt
ifeq ($(DATACODE), 0)
	rm -rf $(MODEL_FS_PATH)/web/img/mark_copy.gif
endif
	rm -rf $(MODEL_FS_PATH)/lib/qmi_config.xml
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_5G_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_7612_5G_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_5G.dat
endif
endif
endif

ifeq ($(INCLUDE_ASR_AT), y)

	test -f $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml && $(TOOLS_PATH)/mkcfg -m $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_default_config.xml -s $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml -o $(MODEL_FS_PATH)/../fac_config_$(MODEL).xml || echo "$(BUILD_PATH)/config/$(MODEL)/$(REGION)/flash_config.xml not found, do not generate merged flash config file."
ifeq ($(INCLUDE_FLASH_4M), y)
#   add some no use file # need usbnet.ko cdc_enc.ko cdc_ncm.ko cdc-acm.ko  usbserial.ko option.ko
#
	cd $(MODEL_FS_PATH)/web/img/ && rm -f domain-redirect.png icons-02.png icons-03.png
	cd $(MODEL_FS_PATH)/lib/modules && rm -f qmi_wwan.ko usbnet.ko cdc-wdm.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/nat/fast-classifier/fast-classifier.ko
	rm -rf $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/netfilter/qos-appidentify/extentions
	rm -rf $(MODEL_FS_PATH)/usr/bin/mmtd
	rm -rf $(MODEL_FS_PATH)/web/xml/log.txt
	rm -rf $(MODEL_FS_PATH)/usr/bin/mobile_cli
ifeq ($(DATACODE), 0)
	rm -rf $(MODEL_FS_PATH)/web/img/mark_copy.gif
endif
	rm -rf $(MODEL_FS_PATH)/lib/qmi_config.xml
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_5G_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_7612_5G_FCC.dat
	rm -rf $(MODEL_FS_PATH)/etc/SingleSKU_5G.dat
endif
endif

	rm -rf $(UDISK_PATH)
	mkdir -p $(UDISK_PATH)/lib
	mkdir -p $(UDISK_PATH)/bin
ifneq ($(INCLUDE_SMS_WITHOUT_SQLITE), y)
ifeq ($(INCLUDE_APPS_IN_UDISK), y)
	cp -P $(MODEL_FS_PATH)/lib/libsqlite3.so.0.8.6 $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/libsqlite3.so.0.8.6
	cd $(MODEL_FS_PATH)/lib/ && ln -sf /tmp/udisk/lib/libsqlite3.so.0.8.6 libsqlite3.so
	cd $(MODEL_FS_PATH)/lib/ && ln -sf /tmp/udisk/lib/libsqlite3.so.0.8.6 libsqlite3.so.0
else
	cd $(MODEL_FS_PATH)/lib/ && ln -sf libsqlite3.so.0.8.6  libsqlite3.so
	cd $(MODEL_FS_PATH)/lib/ && ln -sf libsqlite3.so.0.8.6  libsqlite3.so.0
endif
endif

ifeq ($(INCLUDE_LTEWAN), y)
ifeq ($(INCLUDE_MTD_TYPE_FS),)
	test -e $(MODEL_FS_PATH)/lib/NetIspInfo.ini && cp -P $(MODEL_FS_PATH)/lib/NetIspInfo.ini $(UDISK_PATH)/lib || echo "no isp"
	test -e $(MODEL_FS_PATH)/lib/NetIspInfo.ini && cd $(MODEL_FS_PATH)/lib/ && zip -r NetIspInfo.zip NetIspInfo.ini && rm $(MODEL_FS_PATH)/lib/NetIspInfo.ini || echo "no isp"
endif
endif

ifeq ($(INCLUDE_7610_KO_IN_UDISK), y)
	cp -P $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7610_ap/MT7610_ap.ko $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7610_ap/MT7610_ap.ko
	ln -sf /tmp/udisk/lib/MT7610_ap.ko $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7610_ap/MT7610_ap.ko
endif

ifeq ($(INCLUDE_7612_KO_IN_UDISK), y)
	cp -P $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7612_ap/MT7612_ap.ko $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7612_ap/MT7612_ap.ko
	ln -sf /tmp/udisk/lib/MT7612_ap.ko $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/drivers/net/wireless/MT7612_ap/MT7612_ap.ko
endif

ifeq ($(INCLUDE_ASR_AT), y)
ifneq ($(INCLUDE_NO_UDISK), y)
	rm -rf $(TARGETS_PATH)/udisk.fs.$(MODEL)
	cp -pR $(TARGETS_PATH)/udisk.dir $(TARGETS_PATH)/udisk.fs.$(MODEL)
	find  $(TARGETS_PATH)/udisk.fs.$(MODEL) -name ".gitignore" | xargs rm -rf
	find  $(TARGETS_PATH)/udisk.fs.$(MODEL) -name ".svn" | xargs rm -rf
	cp -pR $(PRIVATE_APPS_PATH)/isp/NetIspInfo.ini $(TARGETS_PATH)/udisk.fs.$(MODEL)/lib
	cp -pR $(TOOLS_PATH)/asrUpgrade/version $(TARGETS_PATH)/udisk.fs.$(MODEL)
ifeq ($(INCLUDE_FSCK_FAT), y)
	cp -p $(PUBLIC_APPS_PATH)/dosfstools-3.0.27/fsck.fat $(TARGETS_PATH)/udisk.fs.$(MODEL)/bin
endif

ifeq ($(INCLUDE_FSCK_EXT3), y)
	cp $(PUBLIC_APPS_PATH)/install/sbin/mkfs.ext3 $(TARGETS_PATH)/udisk.fs.$(MODEL)/bin && chmod +x $(TARGETS_PATH)/udisk.fs.$(MODEL)/bin/mkfs.ext3
endif

ifeq ($(INCLUDE_WEB_IN_UDISK), y)
	cp -pR $(MODEL_FS_PATH)/web/ $(TARGETS_PATH)/udisk.fs.$(MODEL)
endif
endif
endif

ifeq ($(INCLUDE_WEB_IN_UDISK), y)
	rm -rf $(MODEL_FS_PATH)/web/*
ifeq ($(INCLUDE_ASR_AT), y)
	ln -snf /tmp/udisk2/web $(MODEL_FS_PATH)/web
endif
endif

	rm -rf $(MODEL_FS_PATH)_bak && cp -rf $(MODEL_FS_PATH) $(MODEL_FS_PATH)_bak && zip -q -r $(MODEL_FS_PATH).zip $(MODEL_FS_PATH)_bak

ifeq ($(INCLUDE_APPS_IN_UDISK), y)
ifeq ($(INCLUDE_APP_IQOS), y)
	cp -P $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/netfilter/qos-appidentify/appid.ko $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/netfilter/qos-appidentify/appid.ko
	ln -sf /tmp/udisk/lib/appid.ko $(MODEL_FS_PATH)/lib/modules/kmdir/kernel/net/netfilter/qos-appidentify/appid.ko
endif
ifeq ($(INCLUDE_IPSEC), y)
ifeq ($(INCLUDE_IPSEC_IPSECTOOLS), y)
	cp -P $(MODEL_FS_PATH)/usr/bin/racoon $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/bin/racoon
	ln -sf /tmp/udisk/bin/racoon $(MODEL_FS_PATH)/usr/bin/racoon
endif
ifeq ($(INCLUDE_IPSEC_STRONGSWAN), y)
	cp -P $(MODEL_FS_PATH)/lib/libstrongswan.so.0.0.0 $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/libstrongswan.so*
	ln -sf /tmp/udisk/lib/libstrongswan.so.0.0.0 $(MODEL_FS_PATH)/lib/libstrongswan.so.0
	ln -sf /tmp/udisk/lib/libstrongswan.so.0.0.0 $(MODEL_FS_PATH)/lib/libstrongswan.so

	cp -P $(MODEL_FS_PATH)/lib/libcharon.so.0.0.0 $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/libcharon.so*
	ln -sf /tmp/udisk/lib/libcharon.so.0.0.0 $(MODEL_FS_PATH)/lib/libcharon.so.0
	ln -sf /tmp/udisk/lib/libcharon.so.0.0.0 $(MODEL_FS_PATH)/lib/libcharon.so

	#cp -P $(MODEL_FS_PATH)/lib/libvici.so.0.0.0 $(UDISK_PATH)/lib
	#rm $(MODEL_FS_PATH)/lib/libvici.so*
	#ln -sf /tmp/udisk/lib/libvici.so.0.0.0 $(MODEL_FS_PATH)/lib/libvici.so.0
	#ln -sf /tmp/udisk/lib/libvici.so.0.0.0 $(MODEL_FS_PATH)/lib/libvici.so

	mkdir -p $(UDISK_PATH)/lib/plugins
	cp -P $(MODEL_FS_PATH)/lib/plugins/* $(UDISK_PATH)/lib/plugins
	rm -rf $(MODEL_FS_PATH)/lib/plugins
	ln -sf /tmp/udisk/lib/plugins $(MODEL_FS_PATH)/lib/plugins

	mkdir -p $(UDISK_PATH)/libexec/ipsec
	cp -P $(MODEL_FS_PATH)/libexec/ipsec/* $(UDISK_PATH)/libexec/ipsec
	rm -rf $(MODEL_FS_PATH)/libexec/ipsec
	ln -sf /tmp/udisk/libexec/ipsec $(MODEL_FS_PATH)/libexec/ipsec

	#cp -P $(MODEL_FS_PATH)/bin/pki $(UDISK_PATH)/bin
	#rm $(MODEL_FS_PATH)/bin/pki
	#ln -sf /tmp/udisk/bin/pki $(MODEL_FS_PATH)/bin/pki

	mkdir -p $(UDISK_PATH)/sbin
	#cp -P $(MODEL_FS_PATH)/sbin/swanctl $(UDISK_PATH)/sbin
	#rm $(MODEL_FS_PATH)/sbin/swanctl
	#ln -sf /tmp/udisk/sbin/swanctl $(MODEL_FS_PATH)/sbin/swanctl

	cp -P $(MODEL_FS_PATH)/sbin/ipsec $(UDISK_PATH)/sbin
	rm $(MODEL_FS_PATH)/sbin/ipsec
	ln -sf /tmp/udisk/sbin/ipsec $(MODEL_FS_PATH)/sbin/ipsec

	mkdir -p $(UDISK_PATH)/etc/strongswan.d
	cp -P -r $(MODEL_FS_PATH)/etc/strongswan.d/* $(UDISK_PATH)/etc/strongswan.d
	rm -rf $(MODEL_FS_PATH)/etc/strongswan.d
	ln -sf /tmp/udisk/etc/strongswan.d $(MODEL_FS_PATH)/etc/strongswan.d

	mkdir -p $(UDISK_PATH)/etc/ipsec.d
	cp -P -r $(MODEL_FS_PATH)/etc/ipsec.d/* $(UDISK_PATH)/etc/ipsec.d
	rm -rf $(MODEL_FS_PATH)/etc/ipsec.d
	ln -sf /tmp/udisk/etc/ipsec.d $(MODEL_FS_PATH)/etc/ipsec.d

	cp -P $(MODEL_FS_PATH)/etc/strongswan.conf $(UDISK_PATH)/etc
	rm $(MODEL_FS_PATH)/etc/strongswan.conf
	ln -sf /tmp/udisk/etc/strongswan.conf $(MODEL_FS_PATH)/etc/strongswan.conf

	cp -P $(MODEL_FS_PATH)/etc/ipsec.conf $(UDISK_PATH)/etc
	rm $(MODEL_FS_PATH)/etc/ipsec.conf
	ln -sf /tmp/udisk/etc/ipsec.conf $(MODEL_FS_PATH)/etc/ipsec.conf

	cp -P $(MODEL_FS_PATH)/etc/ipsec.secrets $(UDISK_PATH)/etc
	rm $(MODEL_FS_PATH)/etc/ipsec.secrets
	ln -sf /tmp/udisk/etc/ipsec.secrets $(MODEL_FS_PATH)/etc/ipsec.secrets

	cp -P $(MODEL_FS_PATH)/lib/libwolfssl.so.24.2.0 $(UDISK_PATH)/lib
	rm $(MODEL_FS_PATH)/lib/libwolfssl.so*
	ln -sf /tmp/udisk/lib/libwolfssl.so.24.2.0 $(MODEL_FS_PATH)/lib/libwolfssl.so
	ln -sf /tmp/udisk/lib/libwolfssl.so.24.2.0 $(MODEL_FS_PATH)/lib/libwolfssl.so.24
endif
endif

	#cp -P $(MODEL_FS_PATH)/usr/bin/mobile_cli $(UDISK_PATH)/bin
	#rm $(MODEL_FS_PATH)/usr/bin/mobile_cli
	#ln -sf /tmp/udisk/bin/mobile_cli $(MODEL_FS_PATH)/usr/bin/mobile_cli

	#cp -P $(MODEL_FS_PATH)/usr/bin/iqos-db-parser $(UDISK_PATH)/bin
	#rm $(MODEL_FS_PATH)/usr/bin/iqos-db-parser
	#ln -sf /tmp/udisk/bin/iqos-db-parser $(MODEL_FS_PATH)/usr/bin/iqos-db-parser

	#cp -P $(MODEL_FS_PATH)/usr/bin/iqos-db-loader $(UDISK_PATH)/bin
	#rm $(MODEL_FS_PATH)/usr/bin/iqos-db-loader
	#ln -sf /tmp/udisk/bin/iqos-db-loader $(MODEL_FS_PATH)/usr/bin/iqos-db-loader

ifeq ($(INCLUDE_APP_IQOS), y)
	cp -P $(MODEL_FS_PATH)/usr/bin/tc $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/bin/tc
	ln -sf /tmp/udisk/bin/tc $(MODEL_FS_PATH)/usr/bin/tc
endif

ifeq ($(INCLUDE_OPENVPN_SERVER), y)
	cp -P $(MODEL_FS_PATH)/usr/sbin/openvpn $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/sbin/openvpn
	ln -sf /tmp/udisk/bin/openvpn $(MODEL_FS_PATH)/usr/sbin/openvpn
endif

ifeq ($(INCLUDE_RIP), y)
	cp -P $(MODEL_FS_PATH)/usr/sbin/zebra $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/sbin/zebra
	ln -sf /tmp/udisk/bin/zebra $(MODEL_FS_PATH)/usr/sbin/zebra

	#cp -P $(MODEL_FS_PATH)/usr/sbin/pppd $(UDISK_PATH)/bin
	#rm $(MODEL_FS_PATH)/usr/sbin/pppd
	#ln -sf /tmp/udisk/bin/pppd $(MODEL_FS_PATH)/usr/sbin/pppd

	cp -P $(MODEL_FS_PATH)/usr/sbin/ripd $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/sbin/ripd
	ln -sf /tmp/udisk/bin/ripd $(MODEL_FS_PATH)/usr/sbin/ripd
endif

ifeq ($(INCLUDE_IPV6), y)
	cp -P $(MODEL_FS_PATH)/usr/sbin/npd6 $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/sbin/npd6
	ln -sf /tmp/udisk/bin/npd6 $(MODEL_FS_PATH)/usr/sbin/npd6
endif

ifeq ($(INCLUDE_SSL_OPENSSL), y)
	cp -P $(MODEL_FS_PATH)/usr/sbin/openssl $(UDISK_PATH)/bin
	rm $(MODEL_FS_PATH)/usr/sbin/openssl
	ln -sf /tmp/udisk/bin/openssl $(MODEL_FS_PATH)/usr/sbin/openssl
endif

ifeq ($(INCLUDE_ASR_AT), y)
	cp -p $(MODEL_FS_PATH)/usr/bin/ebtables $(TARGETS_PATH)/udisk.fs.$(MODEL)/bin
	rm $(MODEL_FS_PATH)/usr/bin/ebtables
	ln -sf /tmp/udisk2/bin/ebtables $(MODEL_FS_PATH)/usr/bin/ebtables

	cp -p $(MODEL_FS_PATH)/usr/bin/ip $(TARGETS_PATH)/udisk.fs.$(MODEL)/bin
	rm $(MODEL_FS_PATH)/usr/bin/ip
	ln -sf /tmp/udisk2/bin/ip $(MODEL_FS_PATH)/usr/bin/ip

	cp -p $(MODEL_FS_PATH)/lib/modules/backtrace.ko $(TARGETS_PATH)/udisk.fs.$(MODEL)/lib
	rm $(MODEL_FS_PATH)/lib/modules/backtrace.ko
	ln -sf /tmp/udisk2/lib/backtrace.ko $(MODEL_FS_PATH)/lib/modules/backtrace.ko
ifeq ($(INCLUDE_WEB_IN_UDISK), y)
	rm -rf $(TARGETS_PATH)/udisk.zip && rm -rf $(TARGETS_PATH)/udisk.fs.$(MODEL)_bak && cp -rf $(TARGETS_PATH)/udisk.fs.$(MODEL) $(TARGETS_PATH)/udisk.fs.$(MODEL)_bak
	cd $(TARGETS_PATH)/udisk.fs.$(MODEL)_bak/web/ && zip -q -r locale.zip locale && rm -rf locale
	cd $(TARGETS_PATH)/udisk.fs.$(MODEL)_bak && zip -q -r ../udisk.zip ./
endif
endif
endif

	cd $(UDISK_PATH)/../ && rm -rf udisk.tar.gz && tar zcf udisk.tar.gz $(UDISK_PATH)

	@if test -d $(TOP_PATH)/targets/udisk.$(MODEL); \
	then \
		cd $(TOP_PATH)/targets/udisk.$(MODEL)/ && zip -r udisk.zip *; \
		cp -P udisk.zip $(TOP_PATH)/targets/udisk.zip;\
	fi;

ifeq ($(INCLUDE_FSCK_EXT4), y)
	cp -P $(PRIVATE_APPS_PATH)/user/mobile/prepareUdisk.sh $(MODEL_FS_PATH)/sbin
endif

.PHONY:stripfiles
stripfiles:
	find $(MODEL_FS_PATH)/lib -name "*.so*" -type f | xargs $(STRIP) --strip-unneeded
	#find $(MODEL_FS_PATH)/lib -name "*.a*" -type f | xargs $(STRIP) --strip-unneeded
	find $(MODEL_FS_PATH)/lib -name "*.ko" | xargs $(STRIP) --strip-unneeded
	$(STRIP) --strip-unneeded  $(MODEL_FS_PATH)/usr/bin/*
	$(STRIP) --strip-unneeded  $(MODEL_FS_PATH)/usr/sbin/*

$(FAKEROOT_PATH)/.configured:
	(tar -jkxf fakeroot.tar.bz2 2> /dev/null || true)
	cd $(FAKEROOT_PATH); CFLAGS="-O2 -DGNU -I./" CC=gcc ./configure --prefix=/usr --disable-nls --enable-shared --disable-static
#	cd $(FAKEROOT_PATH); CC=gcc ./configure
	touch $@
	make -C $(FAKEROOT_PATH)

.PHONY:fakeroot
fakeroot: $(FAKEROOT_PATH)/.configured
	@sed -e 's,^PREFIX=.*,PREFIX=$(FAKEROOT_PATH),g' -e 's,^BINDIR=.*,BINDIR=$(FAKEROOT_PATH),g' -e 's,^PATHS=.*,PATHS=$(FAKEROOT_PATH)/.libs:/lib:/usr/lib,g' $(FAKEROOT_PATH)/scripts/fakeroot > $(FAKEROOT_PATH)/fakeroot
	@chmod u+x $(FAKEROOT_PATH)/fakeroot

.PHONY:static_fakeroot
static_fakeroot: $(FAKEROOT_PATH)/.configured
	@sed -e 's/LIB=libfakeroot.so/LIB=libfakeroot.a/' $(FAKEROOT_PATH)/scripts/fakeroot > $(FAKEROOT_PATH)/scripts/fakeroot_static
	@sed -e 's,^PREFIX=.*,PREFIX=$(FAKEROOT_PATH),g' -e 's,^BINDIR=.*,BINDIR=$(FAKEROOT_PATH),g' -e 's,^PATHS=.*,PATHS=$(FAKEROOT_PATH)/.libs:/lib:/usr/lib,g' $(FAKEROOT_PATH)/scripts/fakeroot_static > $(FAKEROOT_PATH)/fakeroot
	@chmod u+x $(FAKEROOT_PATH)/fakeroot	

.PHONY:fakeroot_clean
fakeroot_clean:    
	if [ -e $(FAKEROOT_PATH)/Makefile ];  then make -C $(FAKEROOT_PATH) distclean; fi
	rm -f $(FAKEROOT_PATH)/fakeroot
	rm -f $(FAKEROOT_PATH)/.configured

.PHONY: fs_clean
fs_clean:
	rm -rf $(MODEL_FS_PATH)/../rootfs.$(MODEL)
	rm -rf $(MODEL_FS_PATH)
	rm -rf $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml

.PHONY: fs_create
fs_create:
	cp -pR $(TOP_PATH)/targets/fs.dir $(MODEL_FS_PATH)
	find  $(MODEL_FS_PATH) -name ".gitignore" | xargs rm -rf
	find  $(MODEL_FS_PATH) -name ".svn" | xargs rm -rf
ifneq ($(INCLUDE_CWMP_SSL_VERIFY_PEER), y)
	@rm -fr $(MODEL_FS_PATH)/etc/cert
endif
ifneq ($(INCLUDE_PPTPVPN_SERVER), y)
	@rm -fr $(MODEL_FS_PATH)/etc/ppp/options.pptpd
endif
	chmod -R 755 $(MODEL_FS_PATH)
	rm -fr $(MODEL_FS_PATH)/etc/init.d/*
	cp $(BUILD_PATH)/config/$(MODEL)/rcS_$(MODEL) $(MODEL_FS_PATH)/etc/init.d/rcS
	if test -e $(MODEL_FS_PATH)/sbin; then \
	rm -fr $(MODEL_FS_PATH)/sbin/* ; \
	else \
	mkdir $(MODEL_FS_PATH)/sbin ;  \
	fi
ifeq ($(INCLUDE_SWITCH_MT7628), y)
	if test -e $(TOP_PATH)/build/config/default_switch_files; then \
	cp $(TOP_PATH)/build/config/$(MODEL)/switch_files/* $(MODEL_FS_PATH)/sbin/; \
	fi
endif
	if test -e $(TOP_PATH)/build/config/$(MODEL)/switch_files; then \
	cp $(TOP_PATH)/build/config/$(MODEL)/switch_files/* $(MODEL_FS_PATH)/sbin/; \
	fi
	if test -e $(TOP_PATH)/build/config/$(MODEL)/smp.sh; then \
	cp $(TOP_PATH)/build/config/$(MODEL)/smp.sh $(MODEL_FS_PATH)/sbin/; \
	fi
	rm -fr $(MODEL_FS_PATH)/etc/inittab*
	if test -e $(TOP_PATH)/targets/fs.dir/etc/inittab_$(MODEL); then \
	cp $(TOP_PATH)/targets/fs.dir/etc/inittab_$(MODEL) $(MODEL_FS_PATH)/etc/inittab;\
	else \
	cp $(TOP_PATH)/targets/fs.dir/etc/inittab $(MODEL_FS_PATH)/etc/inittab;\
	fi
ifneq ($(INCLUDE_VOIP), y)
	@rm -fr $(MODEL_FS_PATH)/etc/voiceNotify
endif	

.PHONY:fs_rootfs
fs_rootfs: static_fakeroot
	@echo "FAKEROOT_PATH=$(FAKEROOT_PATH)"
	find  $(MODEL_FS_PATH) -name ".svn" | xargs rm -rf
	find  $(MODEL_FS_PATH) -name ".git*" | xargs rm -rf
	cd $(TOOLS_PATH) && $(FAKEROOT_PATH)/fakeroot $(TOP_PATH)/build/config/./buildFs $(MODEL_FS_PATH) $(ROOTFSTOOLS) $(MODEL) $(SUPPLIER) $(ROOTFS_BLOCK_SIZE)
ifeq ($(INCLUDE_SQUASHFS_IN_UBI), y)
	$(call mkrootfs_squashfs_in_ubivol)
endif

.PHONY:user_check
user_check:
ifneq ($(findstring $(SUPPLIER),mtk_ApSoC_4320), )
	@user=`whoami` && echo "user: "$$user; \
	if [ $$user != "root" ] ; then \
		echo "please switch to root user. or run cmd \"sudo make ...\""; exit 1; \
	else \
		echo "You are root."; \
	fi
endif
.PHONY:fs_sup_bins
fs_sup_bins:
	cp --no-dereference -P $(TOP_PATH)/$(SUPPLIER)/install/private/usr/bin/* $(MODEL_FS_PATH)/usr/bin
ifeq ($(INCLUDE_LAN_WLAN), y) 
	cp --no-dereference -P $(TOP_PATH)/$(SUPPLIER)/install/public/usr/bin/* $(MODEL_FS_PATH)/usr/bin
	cp --no-dereference -P $(TOP_PATH)/$(SUPPLIER)/install/public/lib/*.so.* $(MODEL_FS_PATH)/lib
endif

fs_build: fs_clean fs_create fs_libs fs_bins fs_modules fs_sup_bins datafiles stripfiles fs_sysfiles fs_rootfs

######################
MODEL_NAME = $(shell cat $(TARGETS_PATH)/reduced_data_model_plaintext_$(MODEL).xml | grep -w ModelName | sed 's/.*d=\"*\([ 0-9a-zA-Z-]\{1,\}[0-9a-zA-Z]\).*/\1/' | sed 's/ /_/')
ADD_HWVER_NUM = $(shell cat $(TARGETS_PATH)/reduced_data_model_plaintext_$(MODEL).xml | grep -w AdditionalHardwareVersion | sed 's/.*d=\([0-9a-fA-F]\{2\}\)\([0-9a-fA-F]\{2\}\)\([0-9a-fA-F]\{2\}\)\([0-9a-fA-F]\{2\}\).*/\\x\1\\x\2\\x\3\\x\4/')
MTD_IMAGE_SIZE_NUM:=$(shell printf "%d" $(MTD_IMAGE_SIZE))
MTD_BLOCK_SIZE_NUM:=$(shell printf "%d" $(MTD_BLOCK_SIZE))
MTD_BOOT_SIZE_NUM:=$(shell printf "%d" $(MTD_BOOT_SIZE))
MTD_MISC_SIZE_NUM:=$(shell printf "%d" $(MTD_MISC_SIZE))
MTD_MISC_BLOCKS:=$(shell expr $(MTD_MISC_SIZE_NUM) / $(MTD_BLOCK_SIZE_NUM))
MTD_KERNEL_SIZE_NUM:=$(shell printf "%d" $(MTD_KERNEL_SIZE))
MTD_ROOTFS_SIZE_NUM:=$(shell expr $(MTD_IMAGE_SIZE_NUM) - $(MTD_BOOT_SIZE_NUM) - 4 \* $(MTD_MISC_SIZE_NUM) - $(MTD_KERNEL_SIZE_NUM))
MTD_ROOTFS_BLOCKS:=$(shell expr $(MTD_ROOTFS_SIZE_NUM) / $(MTD_BLOCK_SIZE_NUM))
HWVER_FILE_NAME:=$(shell printf "0x%08X" $(shell expr $(MTD_BOOT_SIZE_NUM) + 2 \* $(MTD_BLOCK_SIZE_NUM) + 255 \* 256))
MFG_FILE_NAME:=$(shell printf "0x%08X" $(MTD_BOOT_SIZE))
ifeq ($(INCLUDE_MTD_TYPE_FS), y)
MKIMAGE_TYPE=2
endif
ifeq ($(INCLUDE_MTD_TYPE_RAW1), y)
MKIMAGE_TYPE=0
endif
ifeq ($(INCLUDE_MTD_TYPE_RAW1), y)
MKIMAGE_TYPE=1
endif



.PHONY:mkimage2_build
mkimage2_build:
	cd $(TOOLS_PATH)/imageTool/linux_mkimage/src2 && make

.PHONY:mkimage2_clean
mkimage2_clean:
	cd $(TOOLS_PATH)/imageTool/linux_mkimage/src2 && make clean

.PHONY:mkkernel_build
mkkernel_build:
	test -d $(TARGETS_PATH)/image_$(MODEL)/ || mkdir -p $(TARGETS_PATH)/image_$(MODEL)/
	$(TOOLS_PATH)/imageTool/mkkernel2 -s $(FLASH_SIZE) -m $(KERNEL_MAX_SIZE) -e $(CMM_TARGET_CPU_ENDIAN) -t $(MTD_PART_TYPE) -p $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -b $(BOOT_TG_PATH)/boot_$(MODEL).bin -k $(KERNEL_TG_PATH)/linux.7z -f $(TARGETS_PATH)/rootfs.$(MODEL) -v $(KERNEL_TG_PATH)/vmlinux -i $(TARGETS_PATH)/image_$(MODEL)



.PHONY:image_build

ifeq ($(INCLUDE_CPU_MT7621), y)
ifeq ($(INCLUDE_FLASH_NAND), y)
BBA_IMAGE_BUILD += bba_kernel_type_jffs2
endif
endif

ifeq ($(INCLUDE_MTD_TYPE_FS), y)
ifeq ($(INCLUDE_FS_TYPE_UBI), y)
BBA_IMAGE_BUILD += bba_image_type_ubi supplier_flash_build
endif
endif

ifeq ($(INCLUDE_CPU_MT7621), y)
ifeq ($(INCLUDE_FLASH_NAND), y)
BBA_IMAGE_BUILD += bba_kernel_type_jffs2
endif
endif

BBA_IMAGE_BUILD ?= image2_build

.PHONY:BBA_IMAGE_BUILD

image_build: user_check $(BBA_IMAGE_BUILD)


image2_build:
	test -d $(TARGETS_PATH)/image_$(MODEL)/ || mkdir -p $(TARGETS_PATH)/image_$(MODEL)/
ifneq ($(findstring $(SUPPLIER),mtk_ApSoC_5030), )
	if test -f $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml; then \
		cat $(BUILD_PATH)/config/$(MODEL)/fac_config_partition.conf | sed "s|BUIDIR_TARGET|$(TARGETS_PATH)|g" | sed "s|SUPPLIER|$(SUPPLIER)|g" | sed "s|CPU_TYPE|$(CPU_TYPE)|g" | sed "s|MODEL|$(MODEL)|g" > $(BUILD_PATH)/config/$(MODEL)/partition.conf.tmp; \
	else \
		cat $(BUILD_PATH)/config/$(MODEL)/partition.conf | sed "s|BUIDIR_TARGET|$(TARGETS_PATH)|g" | sed "s|SUPPLIER|$(SUPPLIER)|g" | sed "s|CPU_TYPE|$(CPU_TYPE)|g" | sed "s|MODEL|$(MODEL)|g" > $(BUILD_PATH)/config/$(MODEL)/partition.conf.tmp; \
	fi
	@if test -d $(TOP_PATH)/targets/udisk.$(MODEL); \
	then \
		cd $(TARGETS_PATH)/image_$(MODEL)/ && $(TOOLS_PATH)/mkflash -p $(BUILD_PATH)/config/$(MODEL)/partition.conf.tmp -x $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -u $(TOP_PATH)/targets/udisk.$(MODEL)/udisk.zip $(IMAGE_PREFIX_OPT); \
	else \
		cd $(TARGETS_PATH)/image_$(MODEL)/ && $(TOOLS_PATH)/mkflash -p $(BUILD_PATH)/config/$(MODEL)/partition.conf.tmp -x $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -u noudisk $(IMAGE_PREFIX_OPT); \
	fi;
	@rm $(BUILD_PATH)/config/$(MODEL)/partition.conf.tmp
else
	if test -f $(CONFFILE_PATH)/oem/$(MODEL)/flash_config.xml; then \
		$(MKIMAGETOOL) -s $(FLASH_SIZE) -m $(KERNEL_MAX_SIZE) -e $(CMM_TARGET_CPU_ENDIAN) -t $(MTD_PART_TYPE) -p $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -b $(BOOT_TG_PATH)/boot_$(MODEL).bin -k $(KERNEL_TG_PATH)/linux.7z -f $(TARGETS_PATH)/rootfs.$(MODEL) -v $(KERNEL_TG_PATH)/vmlinux -i $(TARGETS_PATH)/image_$(MODEL) -l $(MODEL_FS_PATH)/../fac_config_$(MODEL).xml $(IMAGE_PREFIX_OPT) $(UDISK_IMAGE_OPT); \
	else \
		$(MKIMAGETOOL) -s $(FLASH_SIZE) -m $(KERNEL_MAX_SIZE) -e $(CMM_TARGET_CPU_ENDIAN) -t $(MTD_PART_TYPE) -p $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -b $(BOOT_TG_PATH)/boot_$(MODEL).bin -k $(KERNEL_TG_PATH)/linux.7z -f $(TARGETS_PATH)/rootfs.$(MODEL) -v $(KERNEL_TG_PATH)/vmlinux -i $(TARGETS_PATH)/image_$(MODEL) $(IMAGE_PREFIX_OPT) $(UDISK_IMAGE_OPT); \
	fi
endif
ifeq ($(INCLUDE_OPTION66), y)
ifneq ($(AGILE_CONFIG), 1)
	test -e $(TOOLS_PATH)/remodelTool/makeAgileConfigBin.sh && $(TOOLS_PATH)/remodelTool/./makeAgileConfigBin.sh $(MODEL) $(MTD_PART_TYPE) $(AGILECONFIG_NAME)  || echo "no agile config"
endif
endif

.PHONY:image1_build
image1_build:
	test -d $(TARGETS_PATH)/image_$(MODEL)/ || mkdir -p $(TARGETS_PATH)/image_$(MODEL)/
	$(TOOLS_PATH)/imageTool/mkimage -s $(FLASH_SIZE) -m $(KERNEL_MAX_SIZE) -t $(MTD_PART_TYPE) -p $(MODEL_FS_PATH)/../reduced_data_model_plaintext_$(MODEL).xml -b $(BOOT_TG_PATH)/boot_$(MODEL).bin -k $(KERNEL_TG_PATH)/linux.7z -f $(TARGETS_PATH)/rootfs.$(MODEL) -v $(KERNEL_TG_PATH)/vmlinux -i $(TARGETS_PATH)/image_$(MODEL)		

.PHONY:debug_flash
debug_flash:image_build
	bash ./_mk_debug_image $(TARGETS_PATH)/image_$(MODEL)/

bba_kernel_type_jffs2:
	# make kerenl for jffs2
	$(TOOLS_PATH)/mkimage4 \
		-m $(MTD_KERNEL_SIZE) \
		-e $(INCLUDE_ENDIAN_FLAG_IMAGE) \
		-p $(TARGETS_PATH)/reduced_data_model_plaintext_$(MODEL).xml \
		-k $(KERNEL_TG_PATH)/linux.7z -o temp \
		-v $(KERNEL_TG_PATH)/vmlinux \
		-i $(KERNEL_TG_PATH)

	mkdir -p $(KERNEL_TG_PATH)/.kernel_fs
	mv -Tf $(KERNEL_TG_PATH)/temp_tag_kernel.bin $(KERNEL_TG_PATH)/.kernel_fs/linux.7z.tag
	$(TOOLS_PATH)/mkfs.jffs2 \
		-r $(KERNEL_TG_PATH)/.kernel_fs \
		-o $(KERNEL_TG_PATH)/linux.jffs2 \
		-p -n \
		-m none \
		$(INCLUDE_ENDIAN_FLAG_ROOTFS) \
		-e $(MTD_BLOCK_SIZE)
	rm -Rf $(KERNEL_TG_PATH)/.kernel_fs

bba_image_type_ubi:
	#addHw Ver file
	test -d $(TARGETS_PATH)/image_$(MODEL)/ || mkdir -p $(TARGETS_PATH)/image_$(MODEL)/
	rm -Rf $(TARGETS_PATH)/.config_ro_fs
	mkdir -p $(TARGETS_PATH)/.config_ro_fs
	echo -ne "$(ADD_HWVER_NUM)" > $(TARGETS_PATH)/.config_ro_fs/$(HWVER_FILE_NAME)
	$(TOOLS_PATH)/mkfs.ubifs -F -v -c $(MTD_MISC_BLOCKS) -m 2048 -e 126976 -x none -r $(TARGETS_PATH)/.config_ro_fs -o $(TARGETS_PATH)/misc_ro.ubifs
	echo -e "[ubifs]"                 > $(TARGETS_PATH)/ubi.ini
	echo -e "mode=ubi"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "image=$(TARGETS_PATH)/misc_ro.ubifs" >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_id=0"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_type=dynamic"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_name=misc_ro"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_flags=autoresize"   >> $(TARGETS_PATH)/ubi.ini
	cd $(TOOLS_PATH) && $(TOOLS_PATH)/ubinize -v -o $(TARGETS_PATH)/misc_ro.ubi -m 2048 -p $(MTD_BLOCK_SIZE) $(TARGETS_PATH)/ubi.ini
	
	rm -Rf $(TARGETS_PATH)/.config_isp_fs
	mkdir -p $(TARGETS_PATH)/.config_isp_fs
	rm -Rf $(TOOLS_PATH)/remodelTool/AgileConfig.bin
	test -f $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_AgileConfig.bin && cd $(TOOLS_PATH)/remodelTool/ && ./mkIspFile -i $(CONFFILE_PATH)/oem/$(MODEL)/$(MODEL)_AgileConfig.bin || echo " "
	test -f $(TOOLS_PATH)/remodelTool/AgileConfig.bin && cp $(TOOLS_PATH)/remodelTool/AgileConfig.bin $(TARGETS_PATH)/.config_isp_fs/0x00120000 || echo "no agile pro file"
	$(TOOLS_PATH)/mkfs.ubifs -F -v -c $(MTD_MISC_BLOCKS) -m 2048 -e 126976 -x none -r $(TARGETS_PATH)/.config_isp_fs -o $(TARGETS_PATH)/misc_isp.ubifs
	echo -e "[ubifs]"                 > $(TARGETS_PATH)/ubi.ini
	echo -e "mode=ubi"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "image=$(TARGETS_PATH)/misc_isp.ubifs" >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_id=0"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_type=dynamic"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_name=misc_isp"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_flags=autoresize"   >> $(TARGETS_PATH)/ubi.ini
	cd $(TOOLS_PATH) && $(TOOLS_PATH)/ubinize -v -o $(TARGETS_PATH)/misc_isp.ubi -m 2048 -p $(MTD_BLOCK_SIZE) $(TARGETS_PATH)/ubi.ini
	
	#manufacture config
	rm -Rf $(TARGETS_PATH)/.config_rw_fs
	mkdir -p $(TARGETS_PATH)/.config_rw_fs
	mkdir -p $(TARGETS_PATH)/.config_rw_fs/lib
	mkdir -p $(TARGETS_PATH)/.config_rw_fs/SMS
	mkdir -p $(TARGETS_PATH)/.config_rw_fs/Upgrade
	# LTE ISP 
	cp -pR $(PRIVATE_APPS_PATH)/isp/NetIspInfo.ini $(TARGETS_PATH)/.config_rw_fs/lib
	cp -pf $(BUILD_PATH)/config/$(MODEL)/mf_config $(TARGETS_PATH)/.config_rw_fs/$(MFG_FILE_NAME)
	$(TOOLS_PATH)/mkfs.ubifs -F -v -c $(MTD_MISC_BLOCKS) -m 2048 -e 126976 -x none -r $(TARGETS_PATH)/.config_rw_fs -o $(TARGETS_PATH)/misc_rw.ubifs
	echo -e "[ubifs]"                 > $(TARGETS_PATH)/ubi.ini
	echo -e "mode=ubi"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "image=$(TARGETS_PATH)/misc_rw.ubifs" >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_id=0"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_type=dynamic"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_name=misc_rw"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_flags=autoresize"   >> $(TARGETS_PATH)/ubi.ini
	cd $(TOOLS_PATH) && $(TOOLS_PATH)/ubinize -v -o $(TARGETS_PATH)/misc_rw.ubi -m 2048 -p $(MTD_BLOCK_SIZE) $(TARGETS_PATH)/ubi.ini
	
	#manufacture config
	rm -Rf $(TARGETS_PATH)/.config_rw_fs
	mkdir -p $(TARGETS_PATH)/.config_rw_fs
	mkdir -p $(TARGETS_PATH)/.config_rw_fs/lib
	mkdir -p $(TARGETS_PATH)/.config_rw_fs/SMS
	# LTE ISP 
	cp -pR $(PRIVATE_APPS_PATH)/isp/NetIspInfo.ini $(TARGETS_PATH)/.config_rw_fs/lib
	cp -pf $(BUILD_PATH)/config/$(MODEL)/mf_config $(TARGETS_PATH)/.config_rw_fs/$(MFG_FILE_NAME)
	$(TOOLS_PATH)/mkfs.ubifs -F -v -c $(MTD_MISC_BLOCKS) -m 2048 -e 126976 -x none -r $(TARGETS_PATH)/.config_rw_fs -o $(TARGETS_PATH)/misc_rw_bak.ubifs
	echo -e "[ubifs]"                 > $(TARGETS_PATH)/ubi.ini
	echo -e "mode=ubi"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "image=$(TARGETS_PATH)/misc_rw_bak.ubifs" >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_id=0"               >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_type=dynamic"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_name=misc_rw_bak"       >> $(TARGETS_PATH)/ubi.ini
	echo -e "vol_flags=autoresize"   >> $(TARGETS_PATH)/ubi.ini
	cd $(TOOLS_PATH) && $(TOOLS_PATH)/ubinize -v -o $(TARGETS_PATH)/misc_rw_bak.ubi -m 2048 -p $(MTD_BLOCK_SIZE) $(TARGETS_PATH)/ubi.ini
	

	# make kerenl+rootfs image: UP.bin
	$(TOOLS_PATH)/mkimage4 \
		-s $(MTD_IMAGE_SIZE) \
		-l $(MTD_BOOT_SIZE) \
		-m $(MTD_KERNEL_SIZE) \
		-n $(MTD_MISC_SIZE) \
		-e $(INCLUDE_ENDIAN_FLAG_IMAGE) \
		-p $(TARGETS_PATH)/reduced_data_model_plaintext_$(MODEL).xml \
		-k $(KERNEL_TG_PATH)/linux.jffs2 \
		-f $(TARGETS_PATH)/rootfs.$(MODEL).ubi \
		-v $(KERNEL_TG_PATH)/vmlinux \
		-i $(TARGETS_PATH)/image_$(MODEL)

	# make boot+kerenl+rootfs image: UP_BOOT.bin FLASH.bin
	# MKIMAGE_TYPE:  0:RAW1, 1:RAW2, 2:FS
	$(TOOLS_PATH)/mkimage4 \
		-t $(MKIMAGE_TYPE) \
		-s $(MTD_IMAGE_SIZE) \
		-l $(MTD_BOOT_SIZE) \
		-m $(MTD_KERNEL_SIZE) \
		-n $(MTD_MISC_SIZE) \
		-e $(INCLUDE_ENDIAN_FLAG_IMAGE) \
		-p $(TARGETS_PATH)/reduced_data_model_plaintext_$(MODEL).xml \
		-b $(BOOT_TG_PATH)/boot_$(MODEL).bin \
		-k $(KERNEL_TG_PATH)/linux.jffs2 \
		-f $(TARGETS_PATH)/rootfs.$(MODEL).ubi \
		-c $(TARGETS_PATH)/misc_rw.ubi \
		-a $(TARGETS_PATH)/misc_ro.ubi \
		-d $(TARGETS_PATH)/misc_rw_bak.ubi \
		-q $(TARGETS_PATH)/misc_isp.ubi \
		-v $(KERNEL_TG_PATH)/vmlinux \
		-i $(TARGETS_PATH)/image_$(MODEL)

NEW_FLASH_BIN = $(shell cd $(TARGETS_PATH)/image_$(MODEL)/ && ls -t *_flash.bin | grep -v '^d' | head -n 1)
supplier_flash_build:
	$(TOP_PATH)/build/config/$(MODEL)/do_oob.sh $(TARGETS_PATH)/image_$(MODEL)/$(NEW_FLASH_BIN)
ifeq ($(INCLUDE_FS_TYPE_JFFS2), y)
	$(TOP_PATH)/build/config/$(MODEL)/do_partable.sh -b $(MTD_BLOCK_SIZE_NUM) -o $(TARGETS_PATH)/image_$(MODEL)/$(NEW_FLASH_BIN).partable $(MTD_BOOT_SIZE_NUM) $(BOOT_TG_PATH)/boot_$(MODEL).bin $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_ro.jffs2 $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_rw.jffs2 $(MTD_KERNEL_SIZE_NUM) $(KERNEL_TG_PATH)/linux.jffs2 $(MTD_ROOTFS_SIZE_NUM) $(TARGETS_PATH)/rootfs.$(MODEL).jffs2
endif
ifeq ($(INCLUDE_FS_TYPE_UBI), y)
	$(TOP_PATH)/build/config/$(MODEL)/do_partable.sh -b $(MTD_BLOCK_SIZE_NUM) -o $(TARGETS_PATH)/image_$(MODEL)/$(NEW_FLASH_BIN).partable $(MTD_BOOT_SIZE_NUM) $(BOOT_TG_PATH)/boot_$(MODEL).bin $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_ro.ubi $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_rw.ubi $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_rw_bak.ubi $(MTD_MISC_SIZE_NUM) $(TARGETS_PATH)/misc_isp.ubi $(MTD_KERNEL_SIZE_NUM) $(KERNEL_TG_PATH)/linux.jffs2 $(MTD_ROOTFS_SIZE_NUM) $(TARGETS_PATH)/rootfs.$(MODEL).ubi
endif
ifeq ($(INCLUDE_OPTION66), y)
ifneq ($(AGILE_CONFIG), 1)
	test -e $(TOOLS_PATH)/remodelTool/makeAgileConfigBin.sh && $(TOOLS_PATH)/remodelTool/./makeAgileConfigBin.sh $(MODEL) $(MTD_PART_TYPE) $(AGILECONFIG_NAME)  || echo "no agile config"
endif
endif

clean:boot_clean kernel_clean modules_clean apps_clean supplier_apps_clean fs_clean fakeroot_clean
	@echo "Clear All Objects"

